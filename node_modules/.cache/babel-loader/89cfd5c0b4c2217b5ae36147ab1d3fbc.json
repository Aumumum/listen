{"remainingRequest":"C:\\Users\\Aum\\listen\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Aum\\listen\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Aum\\listen\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Aum\\listen\\src\\api\\http.js","dependencies":[{"path":"C:\\Users\\Aum\\listen\\src\\api\\http.js","mtime":1630999011485},{"path":"C:\\Users\\Aum\\listen\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Aum\\listen\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Aum\\listen\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Aum\\listen\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGF4aW9zIGZyb20gImF4aW9zIjsKY29uc3QgaW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoewogIGJhc2VVUkw6ICJodHRwczovL211c2ljLWFwaS1raGFraS52ZXJjZWwuYXBwLyIsCiAgaGVhZGVyczogewogICAgJ1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnCiAgfSwKICBtYXhSZWRpcmVjdHM6IDUsCiAgLy8g6buY6K6kCiAgcHJveHk6IHsKICAgIHByb3RvY29sOiAnaHR0cHMnLAogICAgaG9zdDogJzEyNy4wLjAuMScsCiAgICBwb3J0OiA4MDAwCiAgfQp9KTsKZXhwb3J0IGZ1bmN0aW9uIGdldCh1cmwsIHBhcmFtcyA9IHt9KSB7CiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gewogICAgaW5zdGFuY2UuZ2V0KHVybCwgewogICAgICBwYXJhbXM6IHBhcmFtcwogICAgfSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgIHJlc29sdmUocmVzcG9uc2UpOwogICAgfSk7CiAgICAvKiAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgew0KICAgICAgIGlmIChlcnJvci5yZXNwb25zZSkgew0KICAgICAgICAgLy8g6K+35rGC5oiQ5Yqf5Y+R5Ye65LiU5pyN5Yqh5Zmo5Lmf5ZON5bqU5LqG54q25oCB56CB77yM5L2G54q25oCB5Luj56CB6LaF5Ye65LqGIDJ4eCDnmoTojIPlm7QNCiAgICAgICAgIGNvbnNvbGUubG9nKCdkYXRhJyxlcnJvci5yZXNwb25zZS5kYXRhKTsNCiAgICAgICAgIGNvbnNvbGUubG9nKCdzdGF0dXMnLGVycm9yLnJlc3BvbnNlLnN0YXR1cyk7DQogICAgICAgICBjb25zb2xlLmxvZygnaGVhZGVycycsZXJyb3IucmVzcG9uc2UuaGVhZGVycyk7DQogICAgICAgfSBlbHNlIGlmIChlcnJvci5yZXF1ZXN0KSB7DQogICAgICAgICAvLyDor7fmsYLlt7Lnu4/miJDlip/lj5HotbfvvIzkvYbmsqHmnInmlLbliLDlk43lupQNCiAgICAgICAgIC8vIGBlcnJvci5yZXF1ZXN0YCDlnKjmtY/op4jlmajkuK3mmK8gWE1MSHR0cFJlcXVlc3Qg55qE5a6e5L6L77yMDQogICAgICAgICAvLyDogIzlnKhub2RlLmpz5Lit5pivIGh0dHAuQ2xpZW50UmVxdWVzdCDnmoTlrp7kvosNCiAgICAgICAgIGNvbnNvbGUubG9nKCfmnKrlk43lupQnLGVycm9yLnJlcXVlc3QpOw0KICAgICAgIH0gZWxzZSB7DQogICAgICAgICAvLyDlj5HpgIHor7fmsYLml7blh7rkuobngrnpl67popgNCiAgICAgICAgIGNvbnNvbGUubG9nKCcjJywgZXJyb3IubWVzc2FnZSk7DQogICAgICAgfQ0KICAgICB9KTsgKi8KICB9KTsKfQpleHBvcnQgZnVuY3Rpb24gcG9zdCh1cmwsIGRhdGEgPSB7fSkgewogIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICBpbnN0YW5jZS5wb3N0KHVybCwgZGF0YSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgIHJlc29sdmUocmVzcG9uc2UpOwogICAgfSwgZXJyID0+IHsKICAgICAgcmVqZWN0KGVycik7CiAgICB9KTsKICB9KTsKfQ=="},{"version":3,"sources":["C:/Users/Aum/listen/src/api/http.js"],"names":["axios","instance","create","baseURL","headers","maxRedirects","proxy","protocol","host","port","get","url","params","Promise","resolve","then","response","post","data","reject","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAE,qCADmB;AAG5BC,EAAAA,OAAO,EAAE;AAAC,wBAAoB;AAArB,GAHmB;AAM5BC,EAAAA,YAAY,EAAE,CANc;AAMX;AACjBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE,OADL;AAELC,IAAAA,IAAI,EAAE,WAFD;AAGLC,IAAAA,IAAI,EAAE;AAHD;AAPqB,CAAb,CAAjB;AAeA,OAAQ,SAASC,GAAT,CAAaC,GAAb,EAAkBC,MAAM,GAAG,EAA3B,EAA+B;AAErC,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9Bb,IAAAA,QAAQ,CACLS,GADH,CACOC,GADP,EACY;AACRC,MAAAA,MAAM,EAAEA;AADA,KADZ,EAIGG,IAJH,CAISC,QAAD,IAAc;AAClBF,MAAAA,OAAO,CAACE,QAAD,CAAP;AACD,KANH;AAOC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,GAxBM,CAAP;AAyBD;AACD,OAAO,SAASC,IAAT,CAAcN,GAAd,EAAmBO,IAAI,GAAG,EAA1B,EAA8B;AACnC,SAAO,IAAIL,OAAJ,CAAY,CAACC,OAAD,EAAUK,MAAV,KAAqB;AACtClB,IAAAA,QAAQ,CAACgB,IAAT,CAAcN,GAAd,EAAmBO,IAAnB,EAAyBH,IAAzB,CACGC,QAAD,IAAc;AACZF,MAAAA,OAAO,CAACE,QAAD,CAAP;AACD,KAHH,EAIGI,GAAD,IAAS;AACPD,MAAAA,MAAM,CAACC,GAAD,CAAN;AACD,KANH;AAQD,GATM,CAAP;AAUD","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://music-api-khaki.vercel.app/\",\r\n\r\n  headers: {'X-Requested-With': 'XMLHttpRequest',\r\n},\r\n\r\n  maxRedirects: 5, // 默认\r\n  proxy: {\r\n    protocol: 'https',\r\n    host: '127.0.0.1',\r\n    port: 8000,\r\n    \r\n  },\r\n}\r\n);\r\nexport  function get(url, params = {}) {\r\n\r\n  return new Promise((resolve) => {\r\n    instance\r\n      .get(url, {\r\n        params: params,\r\n      })\r\n      .then((response) => {\r\n        resolve(response);\r\n      })\r\n     /*  .catch(function (error) {\r\n        if (error.response) {\r\n          // 请求成功发出且服务器也响应了状态码，但状态代码超出了 2xx 的范围\r\n          console.log('data',error.response.data);\r\n          console.log('status',error.response.status);\r\n          console.log('headers',error.response.headers);\r\n        } else if (error.request) {\r\n          // 请求已经成功发起，但没有收到响应\r\n          // `error.request` 在浏览器中是 XMLHttpRequest 的实例，\r\n          // 而在node.js中是 http.ClientRequest 的实例\r\n          console.log('未响应',error.request);\r\n        } else {\r\n          // 发送请求时出了点问题\r\n          console.log('#', error.message);\r\n        }\r\n      }); */\r\n  });\r\n}\r\nexport function post(url, data = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    instance.post(url, data).then(\r\n      (response) => {\r\n        resolve(response);\r\n      },\r\n      (err) => {\r\n        reject(err);\r\n      }\r\n    );\r\n  });\r\n}\r\n"]}]}