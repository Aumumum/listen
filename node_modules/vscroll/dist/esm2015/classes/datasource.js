import { AdapterContext } from './adapter/context';
import { reactiveConfigStorage } from './adapter/props';
export class DatasourceGeneric {
  constructor(datasource, config) {
    this.get = datasource.get;
    if (datasource.settings) {
      this.settings = datasource.settings;
    }
    if (datasource.devSettings) {
      this.devSettings = datasource.devSettings;
    }
    const adapterContext = new AdapterContext(config || { mock: false });
    this.adapter = adapterContext;
  }
  dispose() {
    reactiveConfigStorage.delete(this.adapter.id);
  }
}
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export const makeDatasource = (getConfig) => class extends DatasourceGeneric {
  constructor(datasource) {
    const config = typeof getConfig === 'function' ? getConfig() : void 0;
    super(datasource, config);
  }
};
export const Datasource = makeDatasource();
//# sourceMappingURL=datasource.js.map