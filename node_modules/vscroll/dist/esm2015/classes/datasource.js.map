{"version":3,"file":"datasource.js","sourceRoot":"","sources":["../../../src/classes/datasource.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,qBAAqB,EAAE,MAAM,iBAAiB,CAAC;AAWxD,MAAM,OAAO,iBAAiB;IAM5B,YAAY,UAA6B,EAAE,MAAuB;QAChE,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC;QAC1B,IAAI,UAAU,CAAC,QAAQ,EAAE;YACvB,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;SACrC;QACD,IAAI,UAAU,CAAC,WAAW,EAAE;YAC1B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC;SAC3C;QACD,MAAM,cAAc,GAAG,IAAI,cAAc,CAAC,MAAM,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;QACrE,IAAI,CAAC,OAAO,GAAG,cAAgC,CAAC;IAClD,CAAC;IAED,OAAO;QACL,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAChD,CAAC;CACF;AAED,6EAA6E;AAC7E,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,SAAgC,EAAE,EAAE,CACjE,KAAuB,SAAQ,iBAAuB;IACpD,YAAY,UAA6B;QACvC,MAAM,MAAM,GAAG,OAAO,SAAS,KAAK,UAAU,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACtE,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC5B,CAAC;CACF,CAAC;AAEJ,MAAM,CAAC,MAAM,UAAU,GAAG,cAAc,EAAE,CAAC","sourcesContent":["import { AdapterContext } from './adapter/context';\r\nimport { reactiveConfigStorage } from './adapter/props';\r\nimport {\r\n  IDatasource,\r\n  IDatasourceConstructed,\r\n  DatasourceGet,\r\n  Settings,\r\n  DevSettings,\r\n  IAdapter,\r\n  IAdapterConfig,\r\n} from '../interfaces/index';\r\n\r\nexport class DatasourceGeneric<Data> implements IDatasourceConstructed<Data> {\r\n  get: DatasourceGet<Data>;\r\n  settings?: Settings<Data>;\r\n  devSettings?: DevSettings;\r\n  adapter: IAdapter<Data>;\r\n\r\n  constructor(datasource: IDatasource<Data>, config?: IAdapterConfig) {\r\n    this.get = datasource.get;\r\n    if (datasource.settings) {\r\n      this.settings = datasource.settings;\r\n    }\r\n    if (datasource.devSettings) {\r\n      this.devSettings = datasource.devSettings;\r\n    }\r\n    const adapterContext = new AdapterContext(config || { mock: false });\r\n    this.adapter = adapterContext as IAdapter<Data>;\r\n  }\r\n\r\n  dispose(): void { // todo: should it be published?\r\n    reactiveConfigStorage.delete(this.adapter.id);\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport const makeDatasource = (getConfig?: () => IAdapterConfig) =>\r\n  class <Data = unknown> extends DatasourceGeneric<Data> {\r\n    constructor(datasource: IDatasource<Data>) {\r\n      const config = typeof getConfig === 'function' ? getConfig() : void 0;\r\n      super(datasource, config);\r\n    }\r\n  };\r\n\r\nexport const Datasource = makeDatasource();\r\n"]}