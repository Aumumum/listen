{"version":3,"file":"defaultSize.js","sourceRoot":"","sources":["../../../../src/classes/buffer/defaultSize.ts"],"names":[],"mappings":"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","sourcesContent":["import { SizeStrategy } from '../../inputs/index';\n\ninterface ItemSize {\n  size: number;\n  newSize?: number;\n}\n\nexport class SizesRecalculation {\n  newItems: ItemSize[];\n  oldItems: ItemSize[];\n  removed: ItemSize[];\n\n  constructor() {\n    this.reset();\n  }\n\n  reset(): void {\n    this.newItems = [];\n    this.oldItems = [];\n    this.removed = [];\n  }\n}\n\nexport class DefaultSize {\n  private readonly itemSize: number;\n  private readonly sizeStrategy: SizeStrategy;\n  private sizeMap: Map<number, number>;\n  private recalculation: SizesRecalculation;\n\n  private constantSize: number;\n  private frequentSize: number;\n  private averageSize: number;\n  private averageSizeFloat: number;\n\n  constructor(itemSize: number, sizeStrategy: SizeStrategy) {\n    this.itemSize = itemSize;\n    this.sizeStrategy = sizeStrategy;\n    this.sizeMap = new Map<number, number>();\n    this.recalculation = new SizesRecalculation();\n  }\n\n  reset(force: boolean): void {\n    if (force) {\n      this.constantSize = this.itemSize;\n      this.frequentSize = this.itemSize;\n      this.averageSize = this.itemSize;\n      this.averageSizeFloat = this.itemSize;\n      this.sizeMap.clear();\n    }\n    this.recalculation.reset();\n  }\n\n  get(): number {\n    switch (this.sizeStrategy) {\n      case SizeStrategy.Average:\n        return this.averageSize;\n      case SizeStrategy.Frequent:\n        return this.frequentSize;\n      default:\n        return this.constantSize;\n    }\n  }\n\n  private recalculateAverageSize(cacheSize: number): void {\n    const { oldItems, newItems, removed } = this.recalculation;\n    if (oldItems.length) {\n      const oldSize = oldItems.reduce((acc, item) => acc + item.size, 0);\n      const newSize = oldItems.reduce((acc, item) => acc + (item.newSize as number), 0);\n      const averageSize = this.averageSizeFloat || 0;\n      this.averageSizeFloat = averageSize - (oldSize - newSize) / (cacheSize - newItems.length);\n    }\n    if (newItems.length) {\n      const newSize = newItems.reduce((acc, item) => acc + item.size, 0);\n      const averageSize = this.averageSizeFloat || 0;\n      this.averageSizeFloat = ((cacheSize - newItems.length) * averageSize + newSize) / cacheSize;\n    }\n    if (removed.length) {\n      const removedSize = removed.reduce((acc, item) => acc + item.size, 0);\n      const averageSize = this.averageSizeFloat || 0;\n      this.averageSizeFloat = ((cacheSize + removed.length) * averageSize - removedSize) / cacheSize;\n    }\n    this.averageSize = Math.round(this.averageSizeFloat);\n  }\n\n  private recalculateFrequentSize(): void {\n    const { oldItems, newItems, removed } = this.recalculation;\n    const oldFrequentSizeCount = this.sizeMap.get(this.frequentSize);\n    if (newItems.length) {\n      newItems.forEach(({ size }) => this.sizeMap.set(size, (this.sizeMap.get(size) || 0) + 1));\n    }\n    if (oldItems.length) {\n      oldItems.forEach(({ size }) => this.sizeMap.set(size, Math.max((this.sizeMap.get(size) || 0) - 1, 0)));\n      oldItems.forEach(({ newSize: s }) => this.sizeMap.set(s as number, (this.sizeMap.get(s as number) || 0) + 1));\n    }\n    if (removed.length) {\n      removed.forEach(({ size }) => this.sizeMap.set(size, Math.max((this.sizeMap.get(size) || 0) - 1, 0)));\n    }\n    const sorted = [...this.sizeMap.entries()].sort((a, b) => b[1] - a[1]);\n    const mostFrequentCount = sorted[0][1];\n    const listEqual = sorted.filter(i => i[1] === mostFrequentCount);\n    if (listEqual.length > 1 && listEqual.find(i => i[0] === oldFrequentSizeCount)) {\n      // if there are more than 1 most frequent sizes, but the old one is present\n      return;\n    }\n    this.frequentSize = sorted[0][0];\n  }\n\n  recalculate(cacheSize: number): boolean {\n    if (this.sizeStrategy === SizeStrategy.Constant) {\n      return false;\n    }\n    const { oldItems, newItems, removed } = this.recalculation;\n    if (!oldItems.length && !newItems.length && !removed.length) {\n      return false;\n    }\n    const oldValue = this.get();\n    if (this.sizeStrategy === SizeStrategy.Average) {\n      this.recalculateAverageSize(cacheSize);\n    } else {\n      this.recalculateFrequentSize();\n    }\n    this.recalculation.reset();\n    return this.get() !== oldValue;\n  }\n\n  setExisted(oldItem: ItemSize, newItem: ItemSize): void {\n    if (this.sizeStrategy !== SizeStrategy.Constant) {\n      this.recalculation.oldItems.push({\n        size: oldItem.size,\n        newSize: newItem.size\n      });\n    }\n  }\n\n  setNew(newItem: ItemSize): void {\n    if (this.sizeStrategy !== SizeStrategy.Constant) {\n      this.recalculation.newItems.push({\n        size: newItem.size\n      });\n    } else {\n      if (!this.constantSize) {\n        this.constantSize = newItem.size;\n      }\n    }\n  }\n\n  setRemoved(oldItem: ItemSize): void {\n    if (this.sizeStrategy !== SizeStrategy.Constant) {\n      this.recalculation.removed.push({\n        size: oldItem.size\n      });\n    }\n  }\n}\n"]}