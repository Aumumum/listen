{"version":3,"file":"workflow.js","sourceRoot":"","sources":["../../src/workflow.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scroller } from './scroller';\nimport { runStateMachine } from './workflow-transducer';\nimport { Reactive } from './classes/reactive';\nimport { Item } from './classes/item';\nimport { CommonProcess, ProcessStatus as Status, } from './processes/index';\nimport {\n  WorkflowParams,\n  ProcessName,\n  ProcessPayload,\n  ProcessClass,\n  ProcessSubject,\n  WorkflowError,\n  InterruptParams,\n  StateMachineMethods,\n  ScrollerWorkflow,\n} from './interfaces/index';\n\nexport class Workflow<ItemData = unknown> {\n\n  isInitialized: boolean;\n  initTimer: ReturnType<typeof setTimeout> | null;\n  adapterRun$: Reactive<ProcessSubject>;\n  cyclesDone: number;\n  interruptionCount: number;\n  errors: WorkflowError[];\n\n  private disposeScrollEventHandler: () => void;\n  readonly propagateChanges: WorkflowParams<ItemData>['run'];\n  readonly stateMachineMethods: StateMachineMethods<ItemData>;\n\n  scroller: Scroller<ItemData>;\n\n  constructor({ element, datasource, consumer, run }: WorkflowParams<ItemData>) {\n    this.isInitialized = false;\n    this.initTimer = null;\n    this.adapterRun$ = new Reactive();\n    this.cyclesDone = 0;\n    this.interruptionCount = 0;\n    this.errors = [];\n    this.disposeScrollEventHandler = () => null;\n    this.propagateChanges = run;\n    this.stateMachineMethods = {\n      run: this.runProcess(),\n      interrupt: this.interrupt.bind(this),\n      done: this.done.bind(this),\n      onError: this.onError.bind(this)\n    };\n\n    this.scroller = new Scroller<ItemData>({ element, datasource, consumer, workflow: this.getUpdater() });\n\n    if (this.scroller.settings.initializeDelay) {\n      this.initTimer = setTimeout(() => {\n        this.initTimer = null;\n        this.init();\n      }, this.scroller.settings.initializeDelay);\n    } else {\n      this.init();\n    }\n  }\n\n  init(): void {\n    this.scroller.init(this.adapterRun$);\n    this.isInitialized = true;\n\n    // run the Workflow\n    this.callWorkflow({\n      process: CommonProcess.init,\n      status: Status.start\n    });\n\n    // set up scroll event listener\n    const { scrollEventReceiver } = this.scroller.viewport;\n    const onScrollHandler: EventListener =\n      event => this.callWorkflow({\n        process: CommonProcess.scroll,\n        status: Status.start,\n        payload: { event }\n      });\n    scrollEventReceiver.addEventListener('scroll', onScrollHandler);\n    this.disposeScrollEventHandler = () =>\n      scrollEventReceiver.removeEventListener('scroll', onScrollHandler);\n  }\n\n  changeItems(items: Item<ItemData>[]): void {\n    this.propagateChanges(items);\n  }\n\n  callWorkflow(processSubject: ProcessSubject): void {\n    if (!this.isInitialized) {\n      return;\n    }\n    const { process, status } = processSubject;\n    if (process && process.startsWith('adapter') && status !== Status.next) {\n      this.adapterRun$.set(processSubject);\n    }\n    this.process(processSubject);\n  }\n\n  getUpdater(): ScrollerWorkflow<ItemData> {\n    return {\n      call: this.callWorkflow.bind(this),\n      onDataChanged: this.changeItems.bind(this),\n    };\n  }\n\n  process(data: ProcessSubject): void {\n    const { status, process, payload } = data;\n    if (this.scroller.settings.logProcessRun) {\n      this.scroller.logger.log(() => [\n        '%cfire%c', ...['color: #cc7777;', 'color: #000000;'],\n        process, `\"${status}\"`, ...(payload !== void 0 ? [payload] : [])\n      ]);\n    }\n    this.scroller.logger.logProcess(data);\n\n    if (process === CommonProcess.end) {\n      this.scroller.finalize();\n    }\n    runStateMachine({\n      input: data,\n      methods: this.stateMachineMethods as StateMachineMethods<unknown>\n    });\n  }\n\n  runProcess() {\n    return ({ run, process, name }: ProcessClass) =>\n      (...args: any[]): void => {\n        if (this.scroller.settings.logProcessRun) {\n          this.scroller.logger.log(() => [\n            '%crun%c', ...['color: #333399;', 'color: #000000;'],\n            process || name, ...args\n          ]);\n        }\n        run(this.scroller as Scroller, ...args);\n      };\n  }\n\n  onError(process: ProcessName, payload?: ProcessPayload): void {\n    const message: string = payload && String(payload.error) || '';\n    const { time, cycle } = this.scroller.state;\n    this.errors.push({\n      process,\n      message,\n      time,\n      loop: cycle.loopIdNext\n    });\n    this.scroller.logger.logError(message);\n  }\n\n  interrupt({ process, finalize, datasource }: InterruptParams<ItemData>): void {\n    if (finalize) {\n      const { workflow, logger } = this.scroller;\n      // we are going to create a new reference for the scroller.workflow object\n      // calling the old version of the scroller.workflow by any outstanding async processes will be skipped\n      workflow.call = (p: ProcessSubject) => // eslint-disable-line @typescript-eslint/no-unused-vars\n        logger.log('[skip wf call]');\n      workflow.call.interrupted = true;\n      this.scroller.workflow = this.getUpdater();\n      this.interruptionCount++;\n      logger.log(() => `workflow had been interrupted by the ${process} process (${this.interruptionCount})`);\n    }\n    if (datasource) { // Scroller re-initialization case\n      this.scroller.adapter.relax(() => {\n        this.scroller.logger.log('new Scroller instantiation');\n        const scroller = new Scroller<ItemData>({ datasource, scroller: this.scroller });\n        this.scroller.dispose();\n        this.scroller = scroller;\n        this.scroller.init();\n      });\n    }\n  }\n\n  done(): void {\n    const { state, logger } = this.scroller;\n    this.cyclesDone++;\n    logger.logCycle(false);\n    state.cycle.done(this.cyclesDone + 1);\n    this.finalize();\n  }\n\n  dispose(): void {\n    if (this.initTimer) {\n      clearTimeout(this.initTimer);\n    }\n    this.disposeScrollEventHandler();\n    this.adapterRun$.dispose();\n    this.scroller.dispose(true);\n    Object.getOwnPropertyNames(this).forEach(prop => {\n      delete (this as Record<string, unknown>)[prop];\n    });\n  }\n\n  finalize(): void {\n  }\n\n}\n"]}