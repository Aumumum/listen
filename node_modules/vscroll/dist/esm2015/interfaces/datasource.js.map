{"version":3,"file":"datasource.js","sourceRoot":"","sources":["../../../src/interfaces/datasource.ts"],"names":[],"mappings":"","sourcesContent":["import { Settings, DevSettings } from './settings';\nimport { IAdapter } from './adapter';\n\ntype SuccessFn<T = unknown> = (data: T[]) => void;\ntype ErrorFn = (error: unknown) => void;\n\nexport interface ObservableLike<T = unknown> {\n  subscribe(next: SuccessFn<T>, error: ErrorFn, complete: () => void): { unsubscribe: () => void };\n}\n\ntype DSGetCallback<T> = (index: number, count: number, success: SuccessFn<T>, fail?: ErrorFn) => void;\ntype DSGetObservable<T> = (index: number, count: number) => ObservableLike<T[]>;\ntype DSGetPromise<T> = (index: number, count: number) => PromiseLike<T[]>;\n\nexport type DatasourceGet<T> = DSGetCallback<T> | DSGetObservable<T> | DSGetPromise<T>;\n\nexport interface IDatasourceOptional<T = unknown> {\n  get?: DatasourceGet<T>;\n  settings?: Settings<T>;\n  devSettings?: DevSettings;\n}\n\nexport interface IDatasource<T = unknown> extends IDatasourceOptional<T> {\n  get: DatasourceGet<T>;\n  adapter?: IAdapter<T>;\n}\n\nexport interface IDatasourceConstructed<T = unknown> extends IDatasource<T> {\n  adapter: IAdapter<T>;\n}\n"]}