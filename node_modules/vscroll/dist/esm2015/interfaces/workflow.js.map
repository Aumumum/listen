{"version":3,"file":"workflow.js","sourceRoot":"","sources":["../../../src/interfaces/workflow.ts"],"names":[],"mappings":"","sourcesContent":["import { ProcessClass, ProcessName, ProcessPayload, ProcessSubject } from './process';\nimport { IDatasource } from './datasource';\nimport { IPackage } from './adapter';\nimport { Item } from '../classes/item';\nimport { Scroller } from '../scroller';\n\nexport type OnDataChanged<Data> = (items: Item<Data>[]) => void;\n\nexport interface WorkflowParams<ItemData> {\n  datasource: IDatasource<ItemData>;\n  consumer: IPackage;\n  element: HTMLElement;\n  run: OnDataChanged<ItemData>;\n}\n\ninterface CallWorkflow {\n  (process: ProcessSubject): void;\n  interrupted?: boolean;\n}\n\nexport interface ScrollerWorkflow<ItemData = unknown> {\n  call: CallWorkflow;\n  onDataChanged: OnDataChanged<ItemData>;\n}\n\nexport interface ScrollerParams<ItemData> {\n  datasource: IDatasource<ItemData>;\n  consumer?: IPackage;\n  element?: HTMLElement;\n  workflow?: ScrollerWorkflow<ItemData>;\n  scroller?: Scroller<ItemData>; // for re-instantiation\n}\n\nexport type WorkflowGetter<ItemData> = () => ScrollerWorkflow<ItemData>;\n\nexport interface WorkflowError {\n  loop: string;\n  time: number;\n  message: string;\n  process: ProcessName;\n}\n\nexport interface InterruptParams<ItemData> {\n  process: ProcessName;\n  finalize?: boolean;\n  datasource?: IDatasource<ItemData>;\n}\n\nexport interface StateMachineMethods<ItemData> {\n  run: (process: ProcessClass) => (...args: any[]) => void;\n  interrupt: (params: InterruptParams<ItemData>) => void;\n  done: () => void;\n  onError: (process: ProcessName, payload: ProcessPayload) => void;\n}\n\nexport interface StateMachineParams<ItemData = unknown> {\n  input: ProcessSubject;\n  methods: StateMachineMethods<ItemData>;\n}\n"]}