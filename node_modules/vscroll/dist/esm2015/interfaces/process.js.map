{"version":3,"file":"process.js","sourceRoot":"","sources":["../../../src/interfaces/process.ts"],"names":[],"mappings":"","sourcesContent":["import { Scroller } from '../scroller';\r\nimport { CommonProcess, AdapterProcess, ProcessStatus } from '../processes/index';\r\nimport { IDatasourceConstructed } from './datasource';\r\nimport { IAdapterInput } from './adapter';\r\n\r\nexport type ProcessName = CommonProcess | AdapterProcess;\r\n\r\nexport interface ProcessClass {\r\n  process: ProcessName;\r\n  run: (scroller: Scroller, ...args: any[]) => void;\r\n  name: string;\r\n}\r\n\r\nexport interface ProcessPayload {\r\n  process?: ProcessName;\r\n  options?: unknown;\r\n  event?: Event;\r\n  finalize?: boolean;\r\n  doClip?: boolean;\r\n  doRender?: boolean;\r\n  datasource?: IDatasourceConstructed;\r\n  error?: unknown;\r\n}\r\n\r\nexport interface ProcessSubject {\r\n  process: ProcessName;\r\n  status: ProcessStatus;\r\n  payload?: ProcessPayload;\r\n}\r\n\r\nexport type AdapterProcessMap<T> = {\r\n  [key in AdapterProcess]: T;\r\n};\r\n\r\nexport interface IBaseProcess {\r\n  new(): any; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n  process: ProcessName;\r\n}\r\n\r\nexport interface IBaseAdapterProcess extends IBaseProcess {\r\n  parseInput: <T>(scroller: Scroller, options: T, ignoreErrors?: boolean) => IAdapterInput<T>;\r\n}\r\n"]}