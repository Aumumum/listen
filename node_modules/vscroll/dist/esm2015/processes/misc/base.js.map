{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../src/processes/misc/base.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkB,aAAa,EAAE,MAAM,SAAS,CAAC;AAExD,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAG/D,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,OAAoB,EAAgB,EAAE,uBAEvE,MAAM,WAAW;KAIhB;IAFQ,UAAO,GAAgB,OAAQ;SAEvC,CAAC;AAEJ,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,OAAuB,EAAuB,EAAE,uBAExF,MAAM,kBAAmB,SAAS,kBAAkB,CAAC,OAAO,CAAkB;QAI5E,MAAM,CAAC,UAAU,CAAI,QAAkB,EAAE,OAAU,EAAE,YAAY,GAAG,KAAK;YACvE,MAAM,MAAM,GAAqB;gBAC/B,IAAI,EAAE,QAAQ,CAAC,OAAO,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC;aAClD,CAAC;YAEF,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE;gBACvB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;qBAC/C,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,iCAC9B,GAAG,KACN,CAAC,GAAG,CAAC,EAAE,KAAK,IACZ,EAAE,EAAO,CAAC,CAAC;aAChB;iBAAM;gBACL,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;gBACpD,IAAI,CAAC,YAAY,EAAE;oBACjB,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC;wBACrB,OAAO;wBACP,MAAM,EAAE,aAAa,CAAC,KAAK;wBAC3B,OAAO,EAAE,EAAE,KAAK,EAAE,0BAA0B,OAAO,eAAe,EAAE;qBACrE,CAAC,CAAC;iBACJ;aACF;YAED,OAAO,MAAM,CAAC;QAChB,CAAC;KAEF;IA3BQ,UAAO,GAAmB,OAAQ;SA2B1C,CAAC","sourcesContent":["import { AdapterProcess, ProcessStatus } from './enums';\nimport { Scroller } from '../../scroller';\nimport { ADAPTER_METHODS, validate } from '../../inputs/index';\nimport { ProcessName, IBaseProcess, IBaseAdapterProcess, IAdapterInput } from '../../interfaces/index';\n\nexport const BaseProcessFactory = (process: ProcessName): IBaseProcess =>\n\n  class BaseProcess {\n\n    static process: ProcessName = process;\n\n  };\n\nexport const BaseAdapterProcessFactory = (process: AdapterProcess): IBaseAdapterProcess =>\n\n  class BaseAdapterProcess extends (BaseProcessFactory(process) as IBaseProcess) {\n\n    static process: AdapterProcess = process;\n\n    static parseInput<T>(scroller: Scroller, options: T, ignoreErrors = false): IAdapterInput<T> {\n      const result: IAdapterInput<T> = {\n        data: validate(options, ADAPTER_METHODS[process])\n      };\n\n      if (result.data.isValid) {\n        result.params = Object.entries(result.data.params)\n          .reduce((acc, [key, { value }]) => ({\n            ...acc,\n            [key]: value\n          }), {} as T);\n      } else {\n        scroller.logger.log(() => result.data.showErrors());\n        if (!ignoreErrors) {\n          scroller.workflow.call({\n            process,\n            status: ProcessStatus.error,\n            payload: { error: `Wrong argument of the \"${process}\" method call` }\n          });\n        }\n      }\n\n      return result;\n    }\n\n  };\n"]}