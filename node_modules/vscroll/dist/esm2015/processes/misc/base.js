import { ProcessStatus } from './enums';
import { ADAPTER_METHODS, validate } from '../../inputs/index';
export const BaseProcessFactory = (process) => { var _a; return _a = class BaseProcess {
  },
  _a.process = process,
  _a; };
export const BaseAdapterProcessFactory = (process) => { var _a; return _a = class BaseAdapterProcess extends BaseProcessFactory(process) {
    static parseInput(scroller, options, ignoreErrors = false) {
      const result = {
        data: validate(options, ADAPTER_METHODS[process])
      };
      if (result.data.isValid) {
        result.params = Object.entries(result.data.params)
          .reduce((acc, [key, { value }]) => (Object.assign(Object.assign({}, acc), { [key]: value })), {});
      }
      else {
        scroller.logger.log(() => result.data.showErrors());
        if (!ignoreErrors) {
          scroller.workflow.call({
            process,
            status: ProcessStatus.error,
            payload: { error: `Wrong argument of the "${process}" method call` }
          });
        }
      }
      return result;
    }
  },
  _a.process = process,
  _a; };
//# sourceMappingURL=base.js.map