{"version":3,"file":"render.js","sourceRoot":"","sources":["../../../src/processes/render.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseProcessFactory, CommonProcess, ProcessStatus } from './misc/index';\nimport { Scroller } from '../scroller';\nimport { Item } from '../classes/item';\n\nexport default class Render extends BaseProcessFactory(CommonProcess.render) {\n\n  static run(scroller: Scroller): void {\n    const { workflow, state: { cycle, render, scrollState }, viewport } = scroller;\n    scroller.logger.stat('before new items render');\n    if (scrollState.positionBeforeAsync === null) {\n      scrollState.positionBeforeAsync = viewport.scrollPosition;\n    }\n    render.renderTimer = setTimeout(() => {\n      render.renderTimer = null;\n      if (Render.doRender(scroller)) {\n        workflow.call({\n          process: Render.process,\n          status: render.noSize ? ProcessStatus.done : ProcessStatus.next,\n          payload: { process: cycle.initiator }\n        });\n      } else {\n        workflow.call({\n          process: Render.process,\n          status: ProcessStatus.error,\n          payload: { error: 'Can\\'t associate item with element' }\n        });\n      }\n    }, 0);\n  }\n\n  static doRender(scroller: Scroller): boolean {\n    const { state: { fetch, render }, viewport, buffer, logger } = scroller;\n    render.positionBefore = viewport.scrollPosition;\n    if (!fetch.isCheck) {\n      render.sizeBefore = viewport.getScrollableSize();\n      if (\n        fetch.items.map(item => Render.processElement(scroller, item)).some(x => !x)\n      ) {\n        return false;\n      }\n    }\n    buffer.checkDefaultSize();\n    render.sizeAfter = viewport.getScrollableSize();\n    logger.stat('after new items render');\n    logger.log(() => render.noSize ? 'viewport size has not been changed' : void 0);\n    return true;\n  }\n\n  static processElement(scroller: Scroller, item: Item): boolean {\n    const { state: { fetch }, viewport, buffer } = scroller;\n    const element = viewport.element.querySelector(`[data-sid=\"${item.nodeId}\"]`);\n    if (!element) {\n      return false;\n    }\n    item.element = element as HTMLElement;\n    item.element.style.left = '';\n    item.element.style.top = '';\n    item.element.style.position = '';\n    item.invisible = false;\n    item.setSize();\n    buffer.cacheItem(item);\n    if (item.$index < fetch.minIndex) {\n      fetch.negativeSize += item.size;\n    }\n    return true;\n  }\n\n}\n"]}