{"version":3,"file":"append.js","sourceRoot":"","sources":["../../../../src/processes/adapter/append.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scroller } from '../../scroller';\nimport { Item } from '../../classes/item';\nimport { BaseAdapterProcessFactory, AdapterProcess, ProcessStatus } from '../misc/index';\nimport { AdapterAppendOptions, AdapterPrependOptions } from '../../interfaces/index';\n\ntype AdapterAppendPrependOptions = AdapterAppendOptions & AdapterPrependOptions;\n\ninterface AppendRunOptions {\n  process: AdapterProcess;\n  options: AdapterAppendPrependOptions;\n}\n\nexport default class Append extends BaseAdapterProcessFactory(AdapterProcess.append) {\n\n  static run(scroller: Scroller, { process, options }: AppendRunOptions): void {\n\n    const { params } = Append.parseInput(scroller, options);\n    if (!params) {\n      return;\n    }\n    const { items, bof, eof } = params;\n    const prepend = process !== AdapterProcess.append;\n    const _eof = !!(prepend ? bof : eof);\n\n    // virtual prepend case: shift abs min index and update viewport params\n    if (\n      (prepend && _eof && !scroller.buffer.bof.get()) ||\n      (!prepend && _eof && !scroller.buffer.eof.get())\n    ) {\n      Append.doVirtualize(scroller, items, prepend);\n      scroller.workflow.call({\n        process: Append.process,\n        status: ProcessStatus.done\n      });\n      return;\n    }\n\n    Append.simulateFetch(scroller, items, _eof, prepend);\n\n    scroller.workflow.call({\n      process: Append.process,\n      status: ProcessStatus.next\n    });\n  }\n\n  static doVirtualize(scroller: Scroller, items: unknown[], prepend: boolean): void {\n    const { buffer, viewport: { paddings } } = scroller;\n    const bufferToken = prepend ? 'absMinIndex' : 'absMaxIndex';\n    if (isFinite(buffer[bufferToken])) {\n      const size = items.length * buffer.defaultSize;\n      const padding = prepend ? paddings.backward : paddings.forward;\n      buffer[bufferToken] += (prepend ? -1 : 1) * items.length;\n      padding.size += size;\n      if (prepend) {\n        scroller.viewport.scrollPosition += size;\n      }\n      scroller.logger.log(() => `buffer.${[bufferToken]} value is set to ${buffer[bufferToken]}`);\n      scroller.logger.stat(`after virtual ${prepend ? 'prepend' : 'append'}`);\n    }\n  }\n\n  static simulateFetch(scroller: Scroller, items: unknown[], eof: boolean, prepend: boolean): boolean {\n    const { buffer, state: { fetch } } = scroller;\n    const bufferToken = prepend ? 'absMinIndex' : 'absMaxIndex';\n    let indexToAdd = buffer.getIndexToAdd(eof, prepend);\n    let bufferLimit = buffer[bufferToken];\n    const newItems: Item[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const itemToAdd = new Item(indexToAdd, items[i], scroller.routines);\n      if (isFinite(bufferLimit) && (\n        (prepend && indexToAdd < bufferLimit) ||\n        (!prepend && indexToAdd > bufferLimit)\n      )) {\n        bufferLimit += (prepend ? -1 : 1);\n      }\n      (prepend ? Array.prototype.unshift : Array.prototype.push).apply(newItems, [itemToAdd]);\n      // (prepend ? newItems.unshift : newItems.push)(itemToAdd);\n      indexToAdd += (prepend ? -1 : 1);\n    }\n\n    if (bufferLimit !== buffer[bufferToken]) {\n      buffer[bufferToken] = bufferLimit;\n      scroller.logger.log(() => `buffer.${bufferToken} value is set to ${buffer[bufferToken]}`);\n    }\n\n    (prepend ? fetch.prepend : fetch.append).call(fetch, newItems);\n    (prepend ? buffer.prepend : buffer.append).call(buffer, newItems);\n    fetch.first.indexBuffer = !isNaN(buffer.firstIndex) ? buffer.firstIndex : indexToAdd;\n    fetch.last.indexBuffer = !isNaN(buffer.lastIndex) ? buffer.lastIndex : indexToAdd;\n\n    return true;\n  }\n\n}\n"]}