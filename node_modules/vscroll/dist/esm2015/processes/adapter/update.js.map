{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../../src/processes/adapter/update.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scroller } from '../../scroller';\nimport { BaseAdapterProcessFactory, AdapterProcess, ProcessStatus } from '../misc/index';\nimport { Item } from '../../classes/item';\nimport { Direction } from '../../inputs/index';\nimport { AdapterUpdateOptions } from '../../interfaces/index';\n\nexport default class Update extends BaseAdapterProcessFactory(AdapterProcess.update) {\n\n  static run(scroller: Scroller, options: AdapterUpdateOptions): void {\n    const { params } = Update.parseInput(scroller, options);\n    if (!params) {\n      return;\n    }\n\n    const shouldUpdate = Update.doUpdate(scroller, params);\n\n    scroller.workflow.call({\n      process: Update.process,\n      status: shouldUpdate ? ProcessStatus.next : ProcessStatus.done\n    });\n  }\n\n  static doUpdate(scroller: Scroller, params: AdapterUpdateOptions): boolean {\n    const { buffer, viewport, state: { fetch }, routines, logger } = scroller;\n    if (!buffer.items) {\n      logger.log(() => 'no items in Buffer');\n      return false;\n    }\n    const before = [...buffer.items];\n    const { item: firstItem, index: firstIndex, diff: firstItemDiff } =\n      viewport.getEdgeVisibleItem(buffer.items, Direction.backward);\n\n    const trackedIndex = buffer.updateItems(\n      params.predicate,\n      (index, data) => new Item(index, data, routines),\n      firstIndex,\n      !!params.fixRight\n    );\n\n    let delta = 0;\n    const trackedItem = buffer.get(trackedIndex);\n    if (firstItem && firstItem === trackedItem) {\n      delta = - buffer.getSizeByIndex(trackedIndex) + firstItemDiff;\n    }\n\n    const itemsToRemove = before.filter(({ toRemove }) => toRemove);\n    itemsToRemove.forEach(item => item.hide());\n    logger.log(() => itemsToRemove.length\n      ? 'items to remove: [' + itemsToRemove.map(({ $index }) => $index).join(',') + ']'\n      : 'no items to remove'\n    );\n\n    const itemsToRender = buffer.items.filter(({ toInsert }) => toInsert);\n    logger.log(() => itemsToRender.length\n      ? 'items to render: [' + itemsToRender.map(({ $index }) => $index).join(',') + ']'\n      : 'no items to render'\n    );\n\n    fetch.update(trackedIndex, delta, itemsToRender, itemsToRemove);\n    return !!itemsToRemove.length || !!itemsToRender.length;\n  }\n\n}\n"]}