{"version":3,"file":"replace.js","sourceRoot":"","sources":["../../../../src/processes/adapter/replace.ts"],"names":[],"mappings":"AACA,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,EAAE,yBAAyB,EAAE,cAAc,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAGzF,MAAM,CAAC,OAAO,OAAO,OAAQ,SAAQ,yBAAyB,CAAC,cAAc,CAAC,OAAO,CAAC;IAEpF,MAAM,CAAC,GAAG,CAAC,QAAkB,EAAE,OAA8B;QAC3D,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACzD,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QACD,MAAM,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAE1D,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC;YACrB,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI;SAChE,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,QAAkB,EAAE,MAA6B;QAChE,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK;aACnC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;aACtC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE5B,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACpB,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YAC/C,OAAO,KAAK,CAAC;SACd;QAED,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,MAAM,aAAa,GAAyB;YAC1C,SAAS,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE;gBACxB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;oBAC9B,OAAO,IAAI,CAAC;iBACb;gBACD,IAAI,CAAC,QAAQ,EAAE;oBACb,QAAQ,GAAG,IAAI,CAAC;oBAChB,OAAO,MAAM,CAAC,KAAK,CAAC;iBACrB;gBACD,OAAO,KAAK,CAAC;YACf,CAAC;YACD,QAAQ,EAAE,MAAM,CAAC,QAAQ;SAC1B,CAAC;QAEF,OAAO,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAClD,CAAC;CAEF","sourcesContent":["import { Scroller } from '../../scroller';\nimport Update from './update';\nimport { BaseAdapterProcessFactory, AdapterProcess, ProcessStatus } from '../misc/index';\nimport { AdapterReplaceOptions, AdapterUpdateOptions } from '../../interfaces/index';\n\nexport default class Replace extends BaseAdapterProcessFactory(AdapterProcess.replace) {\n\n  static run(scroller: Scroller, options: AdapterReplaceOptions): void {\n    const { params } = Replace.parseInput(scroller, options);\n    if (!params) {\n      return;\n    }\n    const shouldReplace = Replace.doReplace(scroller, params);\n\n    scroller.workflow.call({\n      process: Replace.process,\n      status: shouldReplace ? ProcessStatus.next : ProcessStatus.done,\n    });\n  }\n\n  static doReplace(scroller: Scroller, params: AdapterReplaceOptions): boolean {\n    const toRemove = scroller.buffer.items\n      .filter(item => params.predicate(item))\n      .map(item => item.$index);\n\n    if (!toRemove.length) {\n      scroller.logger.log('no items to be replaced');\n      return false;\n    }\n\n    let injected = false;\n    const updateOptions: AdapterUpdateOptions = {\n      predicate: ({ $index }) => {\n        if (!toRemove.includes($index)) {\n          return true;\n        }\n        if (!injected) {\n          injected = true;\n          return params.items;\n        }\n        return false;\n      },\n      fixRight: params.fixRight\n    };\n\n    return Update.doUpdate(scroller, updateOptions);\n  }\n\n}\n"]}