import Update from './update';
import { BaseAdapterProcessFactory, AdapterProcess, ProcessStatus } from '../misc/index';
export default class Insert extends BaseAdapterProcessFactory(AdapterProcess.insert) {
  static run(scroller, options) {
    const { params } = Insert.parseInput(scroller, options);
    if (!params) {
      return;
    }
    const shouldInsert = Insert.doInsert(scroller, params);
    scroller.workflow.call({
      process: Insert.process,
      status: shouldInsert ? ProcessStatus.next : ProcessStatus.done
    });
  }
  static doInsert(scroller, params) {
    const { before, after, items, decrease } = params;
    const method = (before || after);
    const found = scroller.buffer.items.find(item => method(item.get()));
    if (!found) {
      scroller.logger.log('no item to insert found');
      return false;
    }
    const indexToInsert = found.$index;
    const updateOptions = {
      predicate: ({ $index, data }) => {
        if (indexToInsert === $index) {
          return before ? [...items, data] : [data, ...items];
        }
        return true;
      },
      fixRight: decrease
    };
    return Update.doUpdate(scroller, updateOptions);
  }
}
//# sourceMappingURL=insert.js.map