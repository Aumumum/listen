{"version":3,"file":"fix.js","sourceRoot":"","sources":["../../../../src/processes/adapter/fix.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scroller } from '../../scroller';\nimport { AdapterMethods } from '../../inputs/index';\nimport { BaseAdapterProcessFactory, AdapterProcess, ProcessStatus } from '../misc/index';\nimport {\n  ItemsPredicate,\n  ItemsUpdater,\n  AdapterFixOptions,\n  IValidatedData,\n} from '../../interfaces/index';\n\nconst { [AdapterProcess.fix]: FixParams } = AdapterMethods;\n\nexport default class Fix extends BaseAdapterProcessFactory(AdapterProcess.fix) {\n\n  static run(scroller: Scroller, options: AdapterFixOptions): void {\n    const { workflow } = scroller;\n\n    const { data, params } = Fix.parseInput(scroller, options);\n    if (!params) {\n      return;\n    }\n\n    Object.entries(data.params).forEach(([key, value]) => {\n      if (value.isSet && value.isValid) {\n        Fix.runByType(scroller, key, value.value, data);\n      }\n    });\n\n    workflow.call({\n      process: Fix.process,\n      status: ProcessStatus.done\n    });\n  }\n\n  static runByType(scroller: Scroller, token: string, value: unknown, methodData: IValidatedData): void {\n    switch (token) {\n      case FixParams.scrollPosition:\n        return Fix.setScrollPosition(scroller, value as number);\n      case FixParams.minIndex:\n        return Fix.setMinIndex(scroller, value as number);\n      case FixParams.maxIndex:\n        return Fix.setMaxIndex(scroller, value as number);\n      case FixParams.updater:\n        return Fix.updateItems(scroller, value as ItemsUpdater);\n      case FixParams.scrollToItem:\n        if (methodData.params) {\n          const scrollToItemOpt = methodData.params[FixParams.scrollToItemOpt];\n          const options = scrollToItemOpt ? scrollToItemOpt.value as AdapterFixOptions['scrollToItemOpt'] : void 0;\n          return Fix.scrollToItem(scroller, value as ItemsPredicate, options);\n        }\n        return;\n      case FixParams.scrollToItemOpt:\n        return;\n    }\n  }\n\n  static setScrollPosition({ viewport }: Scroller, value: number): void {\n    let result = value;\n    if (value === -Infinity) {\n      result = 0;\n    } else if (value === Infinity) {\n      result = viewport.getScrollableSize();\n    }\n    viewport.setPosition(result);\n  }\n\n  static setMinIndex({ buffer, settings }: Scroller, value: number): void {\n    settings.minIndex = value;\n    buffer.absMinIndex = value;\n  }\n\n  static setMaxIndex({ buffer, settings }: Scroller, value: number): void {\n    settings.maxIndex = value;\n    buffer.absMaxIndex = value;\n  }\n\n  static updateItems({ buffer, logger }: Scroller, value: ItemsUpdater): void {\n    let updateReference = false;\n    const updater = () => updateReference = true;\n    buffer.items.forEach(item => value(item.get(), updater));\n    if (updateReference) {\n      logger.log(() => 'update Buffer.items reference');\n      buffer.items = [...buffer.items];\n    }\n  }\n\n  static scrollToItem(scroller: Scroller, value: ItemsPredicate, options?: boolean | ScrollIntoViewOptions): void {\n    const found = scroller.buffer.items.find(item => value(item.get()));\n    if (!found) {\n      scroller.logger.log(() => 'scrollToItem cancelled, item not found');\n      return;\n    }\n    found.scrollTo(options);\n  }\n\n}\n"]}