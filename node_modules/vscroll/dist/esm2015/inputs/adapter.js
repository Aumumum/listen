import { VALIDATORS } from './validation';
import { DatasourceProps as AdapterResetParams } from './datasource';
import { AdapterProcess as Process } from '../processes/misc/enums';
const { INTEGER, INTEGER_UNLIMITED, BOOLEAN, OBJECT, ITEM_LIST, FUNC_WITH_X_ARGUMENTS, FUNC_WITH_X_AND_MORE_ARGUMENTS, FUNC_WITH_X_TO_Y_ARGUMENTS, ONE_OF_MUST, ONE_OF_CAN, OR, } = VALIDATORS;
var AdapterNoParams;
(function (AdapterNoParams) {
})(AdapterNoParams || (AdapterNoParams = {}));
const NO_METHOD_PARAMS = {};
const RESET_METHOD_PARAMS = {
  [AdapterResetParams.get]: {
    validators: [FUNC_WITH_X_AND_MORE_ARGUMENTS(2)]
  },
  [AdapterResetParams.settings]: {
    validators: [OBJECT]
  },
  [AdapterResetParams.devSettings]: {
    validators: [OBJECT]
  },
};
var AdapterReloadParams;
(function (AdapterReloadParams) {
  AdapterReloadParams["reloadIndex"] = "reloadIndex";
})(AdapterReloadParams || (AdapterReloadParams = {}));
const RELOAD_METHOD_PARAMS = {
  [AdapterReloadParams.reloadIndex]: {
    validators: [INTEGER]
  },
};
var AdapterAppendParams;
(function (AdapterAppendParams) {
  AdapterAppendParams["items"] = "items";
  AdapterAppendParams["bof"] = "bof";
  AdapterAppendParams["eof"] = "eof";
})(AdapterAppendParams || (AdapterAppendParams = {}));
const APPEND_METHOD_PARAMS = {
  [AdapterAppendParams.items]: {
    validators: [ITEM_LIST],
    mandatory: true
  },
  [AdapterAppendParams.bof]: {
    validators: [BOOLEAN, ONE_OF_CAN([AdapterAppendParams.eof])]
  },
  [AdapterAppendParams.eof]: {
    validators: [BOOLEAN, ONE_OF_CAN([AdapterAppendParams.bof])]
  },
};
var AdapterRemoveParams;
(function (AdapterRemoveParams) {
  AdapterRemoveParams["predicate"] = "predicate";
  AdapterRemoveParams["indexes"] = "indexes";
  AdapterRemoveParams["increase"] = "increase";
})(AdapterRemoveParams || (AdapterRemoveParams = {}));
const REMOVE_METHOD_PARAMS = {
  [AdapterRemoveParams.predicate]: {
    validators: [FUNC_WITH_X_ARGUMENTS(1), ONE_OF_MUST([AdapterRemoveParams.indexes])]
  },
  [AdapterRemoveParams.indexes]: {
    validators: [ITEM_LIST, ONE_OF_MUST([AdapterRemoveParams.predicate])]
  },
  [AdapterRemoveParams.increase]: {
    validators: [BOOLEAN],
    defaultValue: false
  },
};
var AdapterClipParams;
(function (AdapterClipParams) {
  AdapterClipParams["backwardOnly"] = "backwardOnly";
  AdapterClipParams["forwardOnly"] = "forwardOnly";
})(AdapterClipParams || (AdapterClipParams = {}));
const CLIP_METHOD_PARAMS = {
  [AdapterClipParams.backwardOnly]: {
    validators: [BOOLEAN, ONE_OF_CAN([AdapterClipParams.forwardOnly])],
    defaultValue: false
  },
  [AdapterClipParams.forwardOnly]: {
    validators: [BOOLEAN, ONE_OF_CAN([AdapterClipParams.backwardOnly])],
    defaultValue: false
  },
};
var AdapterInsertParams;
(function (AdapterInsertParams) {
  AdapterInsertParams["items"] = "items";
  AdapterInsertParams["before"] = "before";
  AdapterInsertParams["after"] = "after";
  AdapterInsertParams["decrease"] = "decrease";
})(AdapterInsertParams || (AdapterInsertParams = {}));
const INSERT_METHOD_PARAMS = {
  [AdapterInsertParams.items]: {
    validators: [ITEM_LIST],
    mandatory: true
  },
  [AdapterInsertParams.before]: {
    validators: [FUNC_WITH_X_ARGUMENTS(1), ONE_OF_MUST([AdapterInsertParams.after])]
  },
  [AdapterInsertParams.after]: {
    validators: [FUNC_WITH_X_ARGUMENTS(1), ONE_OF_MUST([AdapterInsertParams.before])]
  },
  [AdapterInsertParams.decrease]: {
    validators: [BOOLEAN],
    defaultValue: false
  },
};
var AdapterReplaceParams;
(function (AdapterReplaceParams) {
  AdapterReplaceParams["items"] = "items";
  AdapterReplaceParams["predicate"] = "predicate";
  AdapterReplaceParams["fixRight"] = "fixRight";
})(AdapterReplaceParams || (AdapterReplaceParams = {}));
const REPLACE_METHOD_PARAMS = {
  [AdapterInsertParams.items]: {
    validators: [ITEM_LIST],
    mandatory: true
  },
  [AdapterReplaceParams.predicate]: {
    validators: [FUNC_WITH_X_ARGUMENTS(1)],
    mandatory: true
  },
  [AdapterReplaceParams.fixRight]: {
    validators: [BOOLEAN],
    defaultValue: false
  }
};
var AdapterUpdateParams;
(function (AdapterUpdateParams) {
  AdapterUpdateParams["predicate"] = "predicate";
  AdapterUpdateParams["fixRight"] = "fixRight";
})(AdapterUpdateParams || (AdapterUpdateParams = {}));
const UPDATE_METHOD_PARAMS = {
  [AdapterUpdateParams.predicate]: {
    validators: [FUNC_WITH_X_ARGUMENTS(1)],
    mandatory: true
  },
  [AdapterUpdateParams.fixRight]: {
    validators: [BOOLEAN],
    defaultValue: false
  },
};
var AdapterFixParams;
(function (AdapterFixParams) {
  AdapterFixParams["scrollPosition"] = "scrollPosition";
  AdapterFixParams["minIndex"] = "minIndex";
  AdapterFixParams["maxIndex"] = "maxIndex";
  AdapterFixParams["updater"] = "updater";
  AdapterFixParams["scrollToItem"] = "scrollToItem";
  AdapterFixParams["scrollToItemOpt"] = "scrollToItemOpt";
})(AdapterFixParams || (AdapterFixParams = {}));
const FIX_METHOD_PARAMS = {
  [AdapterFixParams.scrollPosition]: {
    validators: [INTEGER_UNLIMITED]
  },
  [AdapterFixParams.minIndex]: {
    validators: [INTEGER_UNLIMITED]
  },
  [AdapterFixParams.maxIndex]: {
    validators: [INTEGER_UNLIMITED]
  },
  [AdapterFixParams.updater]: {
    validators: [FUNC_WITH_X_TO_Y_ARGUMENTS(1, 2)]
  },
  [AdapterFixParams.scrollToItem]: {
    validators: [FUNC_WITH_X_ARGUMENTS(1)]
  },
  [AdapterFixParams.scrollToItemOpt]: {
    validators: [OR([BOOLEAN, OBJECT])]
  },
};
export const AdapterMethods = {
  [Process.reset]: AdapterResetParams,
  [Process.reload]: AdapterReloadParams,
  [Process.append]: AdapterAppendParams,
  [Process.prepend]: AdapterAppendParams,
  [Process.check]: AdapterNoParams,
  [Process.remove]: AdapterRemoveParams,
  [Process.clip]: AdapterClipParams,
  [Process.insert]: AdapterInsertParams,
  [Process.replace]: AdapterReplaceParams,
  [Process.update]: AdapterUpdateParams,
  [Process.fix]: AdapterFixParams,
};
export const ADAPTER_METHODS = {
  [Process.reset]: RESET_METHOD_PARAMS,
  [Process.reload]: RELOAD_METHOD_PARAMS,
  [Process.append]: APPEND_METHOD_PARAMS,
  [Process.prepend]: APPEND_METHOD_PARAMS,
  [Process.check]: NO_METHOD_PARAMS,
  [Process.remove]: REMOVE_METHOD_PARAMS,
  [Process.clip]: CLIP_METHOD_PARAMS,
  [Process.insert]: INSERT_METHOD_PARAMS,
  [Process.replace]: REPLACE_METHOD_PARAMS,
  [Process.update]: UPDATE_METHOD_PARAMS,
  [Process.fix]: FIX_METHOD_PARAMS,
};
//# sourceMappingURL=adapter.js.map