import { Item } from '../item';
import { Direction } from '../../inputs/index';
declare class Positions {
  startDelta: number;
  before: number;
  relative: number;
  start: number;
  end: number;
  constructor();
  reset(): void;
}
declare class First {
  index: number;
  indexBuffer: number;
  position: number;
  constructor();
  reset(): void;
}
declare class Last {
  index: number;
  indexBuffer: number;
  constructor();
  reset(): void;
}
export declare class FetchModel {
  private _newItemsData;
  items: Item[];
  positions: Positions;
  first: First;
  last: Last;
  hasAnotherPack: boolean;
  callCount: number;
  minIndex: number;
  firstVisibleIndex: number;
  firstVisibleItemDelta: number;
  negativeSize: number;
  direction: Direction | null;
  cancel: (() => void) | null;
  simulate: boolean;
  isPrepend: boolean;
  isCheck: boolean;
  doRemove: boolean;
  constructor();
  reset(): void;
  get newItemsData(): unknown[] | null;
  set newItemsData(items: unknown[] | null);
  get shouldFetch(): boolean;
  get hasNewItems(): boolean;
  get index(): number;
  get count(): number;
  startSimulate(items: Item[]): void;
  stopSimulate(): void;
  append(items: Item[]): void;
  prepend(items: Item[]): void;
  check(items: Item[]): void;
  remove(): void;
  update(index: number, delta: number, items: Item[], itemsToRemove: Item[]): void;
}
export {};
