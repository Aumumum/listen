{"version":3,"file":"check.js","sourceRoot":"","sources":["../../../../src/processes/adapter/check.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,yBAAyB,EAAE,cAAc,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AACzF,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAE/C;IAAmC,yBAA+C;IAAlF;;IAqCA,CAAC;IAnCQ,SAAG,GAAV,UAAW,QAAkB;QACnB,IAAA,QAAQ,GAAyC,QAAQ,SAAjD,EAAE,MAAM,GAAiC,QAAQ,OAAzC,EAAW,KAAK,GAAiB,QAAQ,YAAzB,EAAI,QAAQ,GAAK,QAAQ,SAAb,CAAc;QAClE,IAAI,GAAG,GAAG,QAAQ,EAAE,GAAG,GAAG,CAAC,QAAQ,CAAC;QAEpC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;YACvB,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACvB,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;gBACtB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBACvB,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBACjC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;aAClC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACxB,KAAK,CAAC,KAAK,CAAC,WAAW,GAAG,MAAM,CAAC,UAAU,CAAC;YAC5C,KAAK,CAAC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC;YACpC,IAAA,KAA8B,QAAQ,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,QAAQ,CAAC,EAAlF,UAAU,WAAA,EAAE,IAAI,UAAkE,CAAC;YAClG,KAAK,CAAC,iBAAiB,GAAG,UAAU,CAAC;YACrC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;gBACtB,KAAK,CAAC,qBAAqB,GAAG,CAAE,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;aAC1E;YACD,KAAK,CAAC,KAAK,CACT,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,IAAI,GAAG,EAAxC,CAAwC,CAAC,CACtE,CAAC;SACH;QAED,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE9B,QAAQ,CAAC,IAAI,CAAC;YACZ,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI;SACvE,CAAC,CAAC;IACL,CAAC;IAEH,YAAC;AAAD,CAAC,AArCD,CAAmC,yBAAyB,CAAC,cAAc,CAAC,KAAK,CAAC,GAqCjF","sourcesContent":["import { Scroller } from '../../scroller';\nimport { BaseAdapterProcessFactory, AdapterProcess, ProcessStatus } from '../misc/index';\nimport { Direction } from '../../inputs/index';\n\nexport default class Check extends BaseAdapterProcessFactory(AdapterProcess.check) {\n\n  static run(scroller: Scroller): void {\n    const { workflow, buffer, state: { fetch }, viewport } = scroller;\n    let min = Infinity, max = -Infinity;\n\n    buffer.items.forEach(item => {\n      const size = item.size;\n      item.setSize();\n      if (item.size !== size) {\n        buffer.cacheItem(item);\n        min = Math.min(min, item.$index);\n        max = Math.max(max, item.$index);\n      }\n    });\n\n    if (Number.isFinite(min)) {\n      fetch.first.indexBuffer = buffer.firstIndex;\n      fetch.last.indexBuffer = buffer.lastIndex;\n      const { index: firstIndex, diff } = viewport.getEdgeVisibleItem(buffer.items, Direction.backward);\n      fetch.firstVisibleIndex = firstIndex;\n      if (!isNaN(firstIndex)) {\n        fetch.firstVisibleItemDelta = - buffer.getSizeByIndex(firstIndex) + diff;\n      }\n      fetch.check(\n        buffer.items.filter(item => item.$index >= min && item.$index <= max)\n      );\n    }\n\n    scroller.logger.stat('check');\n\n    workflow.call({\n      process: Check.process,\n      status: Number.isFinite(min) ? ProcessStatus.next : ProcessStatus.done\n    });\n  }\n\n}\n"]}