import { __extends } from "tslib";
import { Item } from '../../classes/item';
import { BaseAdapterProcessFactory, AdapterProcess, ProcessStatus } from '../misc/index';
var Append = /** @class */ (function (_super) {
  __extends(Append, _super);
  function Append() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Append.run = function (scroller, _a) {
    var process = _a.process, options = _a.options;
    var params = Append.parseInput(scroller, options).params;
    if (!params) {
      return;
    }
    var items = params.items, bof = params.bof, eof = params.eof;
    var prepend = process !== AdapterProcess.append;
    var _eof = !!(prepend ? bof : eof);
    // virtual prepend case: shift abs min index and update viewport params
    if ((prepend && _eof && !scroller.buffer.bof.get()) ||
      (!prepend && _eof && !scroller.buffer.eof.get())) {
      Append.doVirtualize(scroller, items, prepend);
      scroller.workflow.call({
        process: Append.process,
        status: ProcessStatus.done
      });
      return;
    }
    Append.simulateFetch(scroller, items, _eof, prepend);
    scroller.workflow.call({
      process: Append.process,
      status: ProcessStatus.next
    });
  };
  Append.doVirtualize = function (scroller, items, prepend) {
    var buffer = scroller.buffer, paddings = scroller.viewport.paddings;
    var bufferToken = prepend ? 'absMinIndex' : 'absMaxIndex';
    if (isFinite(buffer[bufferToken])) {
      var size = items.length * buffer.defaultSize;
      var padding = prepend ? paddings.backward : paddings.forward;
      buffer[bufferToken] += (prepend ? -1 : 1) * items.length;
      padding.size += size;
      if (prepend) {
        scroller.viewport.scrollPosition += size;
      }
      scroller.logger.log(function () { return "buffer." + [bufferToken] + " value is set to " + buffer[bufferToken]; });
      scroller.logger.stat("after virtual " + (prepend ? 'prepend' : 'append'));
    }
  };
  Append.simulateFetch = function (scroller, items, eof, prepend) {
    var buffer = scroller.buffer, fetch = scroller.state.fetch;
    var bufferToken = prepend ? 'absMinIndex' : 'absMaxIndex';
    var indexToAdd = buffer.getIndexToAdd(eof, prepend);
    var bufferLimit = buffer[bufferToken];
    var newItems = [];
    for (var i = 0; i < items.length; i++) {
      var itemToAdd = new Item(indexToAdd, items[i], scroller.routines);
      if (isFinite(bufferLimit) && ((prepend && indexToAdd < bufferLimit) ||
        (!prepend && indexToAdd > bufferLimit))) {
        bufferLimit += (prepend ? -1 : 1);
      }
      (prepend ? Array.prototype.unshift : Array.prototype.push).apply(newItems, [itemToAdd]);
      // (prepend ? newItems.unshift : newItems.push)(itemToAdd);
      indexToAdd += (prepend ? -1 : 1);
    }
    if (bufferLimit !== buffer[bufferToken]) {
      buffer[bufferToken] = bufferLimit;
      scroller.logger.log(function () { return "buffer." + bufferToken + " value is set to " + buffer[bufferToken]; });
    }
    (prepend ? fetch.prepend : fetch.append).call(fetch, newItems);
    (prepend ? buffer.prepend : buffer.append).call(buffer, newItems);
    fetch.first.indexBuffer = !isNaN(buffer.firstIndex) ? buffer.firstIndex : indexToAdd;
    fetch.last.indexBuffer = !isNaN(buffer.lastIndex) ? buffer.lastIndex : indexToAdd;
    return true;
  };
  return Append;
}(BaseAdapterProcessFactory(AdapterProcess.append)));
export default Append;
//# sourceMappingURL=append.js.map