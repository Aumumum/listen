{"version":3,"file":"remove.js","sourceRoot":"","sources":["../../../../src/processes/adapter/remove.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scroller } from '../../scroller';\nimport { BaseAdapterProcessFactory, AdapterProcess, ProcessStatus } from '../misc/index';\nimport { Direction } from '../../inputs/index';\nimport { AdapterRemoveOptions, ItemsPredicate } from '../../interfaces/index';\n\nexport default class Remove extends BaseAdapterProcessFactory(AdapterProcess.remove) {\n\n  static run(scroller: Scroller, options: AdapterRemoveOptions): void {\n    const { params } = Remove.parseInput(scroller, options);\n    if (!params) {\n      return;\n    }\n    const shouldRemove = Remove.doRemove(scroller, params);\n\n    scroller.workflow.call({\n      process: Remove.process,\n      status: shouldRemove ? ProcessStatus.next : ProcessStatus.done\n    });\n  }\n\n  static doRemove(scroller: Scroller, params: AdapterRemoveOptions, sequenceOnly = false): boolean {\n    const { fetch } = scroller.state;\n    fetch.firstVisibleIndex = NaN;\n    const bufferRemoveList = Remove.removeBufferedItems(scroller, params);\n    if (params.indexes && params.indexes.length) { // to avoid duplicate buffer-virtual removals\n      params.indexes = params.indexes.filter(i => !bufferRemoveList.includes(i));\n    }\n    const shouldRemoveBuffered = bufferRemoveList.length > 0;\n    const shouldRemoveVirtual = Remove.removeVirtualItems(scroller, params, sequenceOnly);\n    if (!shouldRemoveBuffered && !shouldRemoveVirtual) {\n      return false;\n    }\n    if (!isNaN(fetch.firstVisibleIndex)) {\n      fetch.remove();\n    }\n    scroller.logger.stat('after remove');\n    return true;\n  }\n\n  static removeBufferedItems(scroller: Scroller, options: AdapterRemoveOptions): number[] {\n    const { predicate, indexes, increase } = options;\n    let result: number[] = [];\n    if (predicate) {\n      result = Remove.runPredicateOverBuffer(scroller, predicate, !!increase);\n    }\n    if (indexes) {\n      const indexPredicate: ItemsPredicate = ({ $index }) => indexes.indexOf($index) >= 0;\n      result = Remove.runPredicateOverBuffer(scroller, indexPredicate, !!increase);\n    }\n    return result;\n  }\n\n  static runPredicateOverBuffer(scroller: Scroller, predicate: ItemsPredicate, increase: boolean): number[] {\n    const { viewport, buffer, buffer: { items }, state: { fetch } } = scroller;\n\n    // get items to remove\n    const clipList = [];\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      if (predicate(item.get())) {\n        clipList.push(item);\n        item.toRemove = true;\n      } else if (clipList.length) {\n        break; // allow only first strict uninterrupted sequence\n      }\n    }\n    if (!clipList.length) {\n      return [];\n    }\n\n    // what item should be shown after remove (1-4)\n    const firstClipIndex = clipList[0].$index, lastClipIndex = clipList[clipList.length - 1].$index;\n    // 1) current first visible item will remain\n    const { index: firstIndex, diff } = viewport.getEdgeVisibleItem(buffer.items, Direction.backward);\n    if (firstIndex < firstClipIndex || firstIndex > lastClipIndex) {\n      fetch.firstVisibleIndex = firstIndex;\n      fetch.firstVisibleItemDelta = - buffer.getSizeByIndex(firstIndex) + diff;\n    }\n    // 2) next after the last removed item\n    if (isNaN(fetch.firstVisibleIndex) && lastClipIndex < buffer.finiteAbsMaxIndex) {\n      fetch.firstVisibleIndex = lastClipIndex + 1;\n    }\n    // 3) prev before the first removed item\n    if (isNaN(fetch.firstVisibleIndex) && firstClipIndex > buffer.finiteAbsMinIndex) {\n      fetch.firstVisibleIndex = firstClipIndex - 1;\n    }\n    // 4) prev before the first removed item\n    if (isNaN(fetch.firstVisibleIndex)) {\n      fetch.firstVisibleIndex = buffer.finiteAbsMinIndex;\n    }\n\n    // logical removal\n    const indexListToRemove = clipList.map(item => item.$index);\n    scroller.logger.log(() =>\n      `going to remove ${clipList.length} item(s) from Buffer: [${indexListToRemove.join(',')}]`\n    );\n    buffer.removeItems(indexListToRemove, increase, false);\n    buffer.checkDefaultSize();\n    Remove.shiftFirstVisibleIndex(scroller, indexListToRemove, increase);\n\n    // physical removal (hiding)\n    clipList.forEach(item => item.hide());\n\n    return indexListToRemove;\n  }\n\n  static removeVirtualItems(scroller: Scroller, params: AdapterRemoveOptions, sequenceOnly: boolean): boolean {\n    const { indexes, increase } = params;\n    if (!indexes || !indexes.length) {\n      return false;\n    }\n    const { buffer, viewport, state: { fetch } } = scroller;\n\n    // get items to remove\n    const { finiteAbsMinIndex, firstIndex, finiteAbsMaxIndex, lastIndex } = buffer;\n    const toRemove = [];\n    let last = NaN;\n    for (let i = 0, len = indexes.length; i < len; i++) {\n      const index = indexes[i];\n      if (index >= finiteAbsMinIndex && !isNaN(firstIndex) && index < firstIndex) {\n        toRemove.push(index); // backward;\n      } else if (index <= finiteAbsMaxIndex && !isNaN(lastIndex) && index > lastIndex) {\n        toRemove.push(index); // forward;\n      } else {\n        continue;\n      }\n      if (sequenceOnly && !isNaN(last) && Math.abs(last - index) > 1) {\n        // allow only first strict uninterrupted sequence\n        break;\n      }\n      last = index;\n    }\n\n    if (!toRemove.length) {\n      return false;\n    }\n\n    // what should be shown after remove; Buffer removal has priority\n    if (isNaN(fetch.firstVisibleIndex)) {\n      const { index, diff } = viewport.getEdgeVisibleItem(buffer.items, Direction.backward);\n      if (!isNaN(index)) {\n        fetch.firstVisibleIndex = index;\n        fetch.firstVisibleItemDelta = - buffer.getSizeByIndex(index) + diff;\n      }\n    }\n\n    // virtual removal\n    scroller.logger.log(() => `going to remove ${toRemove.length} item(s) virtually`);\n    buffer.removeItems(toRemove, !!increase, true);\n    buffer.checkDefaultSize();\n    Remove.shiftFirstVisibleIndex(scroller, toRemove, !!increase);\n\n    return true;\n  }\n\n  static shiftFirstVisibleIndex({ state: { fetch } }: Scroller, listToRemove: number[], increase: boolean): void {\n    if (isNaN(fetch.firstVisibleIndex)) {\n      return;\n    }\n    const shift = listToRemove.reduce((acc, index) => acc + (\n      ((increase && index > fetch.firstVisibleIndex) || (!increase && index < fetch.firstVisibleIndex)) ? 1 : 0\n    ), 0);\n    fetch.firstVisibleIndex = fetch.firstVisibleIndex + (increase ? shift : -shift);\n  }\n\n}\n"]}