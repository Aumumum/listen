{"version":3,"file":"insert.js","sourceRoot":"","sources":["../../../../src/processes/adapter/insert.ts"],"names":[],"mappings":";AACA,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,EAAE,yBAAyB,EAAE,cAAc,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAGzF;IAAoC,0BAAgD;IAApF;;IAsCA,CAAC;IApCQ,UAAG,GAAV,UAAW,QAAkB,EAAE,OAA6B;QAClD,IAAA,MAAM,GAAK,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,OAAzC,CAA0C;QACxD,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QACD,IAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAEvD,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC;YACrB,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI;SAC/D,CAAC,CAAC;IACL,CAAC;IAEM,eAAQ,GAAf,UAAgB,QAAkB,EAAE,MAA4B;QACtD,IAAA,MAAM,GAA6B,MAAM,OAAnC,EAAE,KAAK,GAAsB,MAAM,MAA5B,EAAE,KAAK,GAAe,MAAM,MAArB,EAAE,QAAQ,GAAK,MAAM,SAAX,CAAY;QAClD,IAAM,MAAM,GAAG,CAAC,MAAM,IAAI,KAAK,CAAmB,CAAC;QACnD,IAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAlB,CAAkB,CAAC,CAAC;QACrE,IAAI,CAAC,KAAK,EAAE;YACV,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YAC/C,OAAO,KAAK,CAAC;SACd;QAED,IAAM,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC;QACnC,IAAM,aAAa,GAAyB;YAC1C,SAAS,EAAE,UAAC,EAAgB;oBAAd,MAAM,YAAA,EAAE,IAAI,UAAA;gBACxB,IAAI,aAAa,KAAK,MAAM,EAAE;oBAC5B,OAAO,MAAM,CAAC,CAAC,wCAAK,KAAK,KAAE,IAAI,GAAE,CAAC,gBAAE,IAAI,UAAK,KAAK,EAAC,CAAC;iBACrD;gBACD,OAAO,IAAI,CAAC;YACd,CAAC;YACD,QAAQ,EAAE,QAAQ;SACnB,CAAC;QAEF,OAAO,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAClD,CAAC;IAEH,aAAC;AAAD,CAAC,AAtCD,CAAoC,yBAAyB,CAAC,cAAc,CAAC,MAAM,CAAC,GAsCnF","sourcesContent":["import { Scroller } from '../../scroller';\nimport Update from './update';\nimport { BaseAdapterProcessFactory, AdapterProcess, ProcessStatus } from '../misc/index';\nimport { AdapterInsertOptions, AdapterUpdateOptions, ItemsPredicate } from '../../interfaces/index';\n\nexport default class Insert extends BaseAdapterProcessFactory(AdapterProcess.insert) {\n\n  static run(scroller: Scroller, options: AdapterInsertOptions): void {\n    const { params } = Insert.parseInput(scroller, options);\n    if (!params) {\n      return;\n    }\n    const shouldInsert = Insert.doInsert(scroller, params);\n\n    scroller.workflow.call({\n      process: Insert.process,\n      status: shouldInsert ? ProcessStatus.next : ProcessStatus.done\n    });\n  }\n\n  static doInsert(scroller: Scroller, params: AdapterInsertOptions): boolean {\n    const { before, after, items, decrease } = params;\n    const method = (before || after) as ItemsPredicate;\n    const found = scroller.buffer.items.find(item => method(item.get()));\n    if (!found) {\n      scroller.logger.log('no item to insert found');\n      return false;\n    }\n\n    const indexToInsert = found.$index;\n    const updateOptions: AdapterUpdateOptions = {\n      predicate: ({ $index, data }) => {\n        if (indexToInsert === $index) {\n          return before ? [...items, data] : [data, ...items];\n        }\n        return true;\n      },\n      fixRight: decrease\n    };\n\n    return Update.doUpdate(scroller, updateOptions);\n  }\n\n}\n"]}