{"version":3,"file":"domRoutines.js","sourceRoot":"","sources":["../../../src/classes/domRoutines.ts"],"names":[],"mappings":"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","sourcesContent":["import { Settings } from './settings';\nimport { Direction } from '../inputs/index';\n\nexport class Routines {\n\n  readonly horizontal: boolean;\n  readonly window: boolean;\n\n  constructor(settings: Settings) {\n    this.horizontal = settings.horizontal;\n    this.window = settings.windowViewport;\n  }\n\n  checkElement(element: HTMLElement): void {\n    if (!element) {\n      throw new Error('HTML element is not defined');\n    }\n  }\n\n  getScrollPosition(element: HTMLElement): number {\n    if (this.window) {\n      return window.pageYOffset;\n    }\n    this.checkElement(element);\n    return element[this.horizontal ? 'scrollLeft' : 'scrollTop'];\n  }\n\n  setScrollPosition(element: HTMLElement, value: number): void {\n    value = Math.max(0, value);\n    if (this.window) {\n      if (this.horizontal) {\n        window.scrollTo(value, window.scrollY);\n      } else {\n        window.scrollTo(window.scrollX, value);\n      }\n      return;\n    }\n    this.checkElement(element);\n    element[this.horizontal ? 'scrollLeft' : 'scrollTop'] = value;\n  }\n\n  getParams(element: HTMLElement, doNotBind?: boolean): ClientRect {\n    this.checkElement(element);\n    if (this.window && doNotBind) {\n      return {\n        'height': element.clientHeight,\n        'width': element.clientWidth,\n        'top': element.clientTop,\n        'bottom': element.clientTop + element.clientHeight,\n        'left': element.clientLeft,\n        'right': element.clientLeft + element.clientWidth\n      };\n    }\n    return element.getBoundingClientRect();\n  }\n\n  getSize(element: HTMLElement, doNotBind?: boolean): number {\n    return this.getParams(element, doNotBind)[this.horizontal ? 'width' : 'height'];\n  }\n\n  getSizeStyle(element: HTMLElement): number {\n    this.checkElement(element);\n    const size = element.style[this.horizontal ? 'width' : 'height'];\n    return parseFloat(size as string) || 0;\n  }\n\n  setSizeStyle(element: HTMLElement, value: number): void {\n    this.checkElement(element);\n    value = Math.max(0, Math.round(value));\n    element.style[this.horizontal ? 'width' : 'height'] = `${value}px`;\n  }\n\n  getEdge(element: HTMLElement, direction: Direction, doNotBind?: boolean): number {\n    const params = this.getParams(element, doNotBind);\n    const isFwd = direction === Direction.forward;\n    return params[isFwd ? (this.horizontal ? 'right' : 'bottom') : (this.horizontal ? 'left' : 'top')];\n  }\n\n  getEdge2(element: HTMLElement, direction: Direction, relativeElement: HTMLElement, opposite: boolean): number {\n    // vertical only ?\n    return element.offsetTop - (relativeElement ? relativeElement.scrollTop : 0) +\n      (direction === (!opposite ? Direction.forward : Direction.backward) ? this.getSize(element) : 0);\n  }\n\n  hideElement(element: HTMLElement): void {\n    this.checkElement(element);\n    element.style.display = 'none';\n  }\n\n  getOffset(element: HTMLElement): number {\n    this.checkElement(element);\n    return (this.horizontal ? element.offsetLeft : element.offsetTop) || 0;\n  }\n\n  scrollTo(element: HTMLElement, argument?: boolean | ScrollIntoViewOptions): void {\n    this.checkElement(element);\n    element.scrollIntoView(argument);\n  }\n\n}\n"]}