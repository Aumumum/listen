import { Direction } from '../inputs/index';
var Routines = /** @class */ (function () {
  function Routines(settings) {
    this.horizontal = settings.horizontal;
    this.window = settings.windowViewport;
  }
  Routines.prototype.checkElement = function (element) {
    if (!element) {
      throw new Error('HTML element is not defined');
    }
  };
  Routines.prototype.getScrollPosition = function (element) {
    if (this.window) {
      return window.pageYOffset;
    }
    this.checkElement(element);
    return element[this.horizontal ? 'scrollLeft' : 'scrollTop'];
  };
  Routines.prototype.setScrollPosition = function (element, value) {
    value = Math.max(0, value);
    if (this.window) {
      if (this.horizontal) {
        window.scrollTo(value, window.scrollY);
      }
      else {
        window.scrollTo(window.scrollX, value);
      }
      return;
    }
    this.checkElement(element);
    element[this.horizontal ? 'scrollLeft' : 'scrollTop'] = value;
  };
  Routines.prototype.getParams = function (element, doNotBind) {
    this.checkElement(element);
    if (this.window && doNotBind) {
      return {
        'height': element.clientHeight,
        'width': element.clientWidth,
        'top': element.clientTop,
        'bottom': element.clientTop + element.clientHeight,
        'left': element.clientLeft,
        'right': element.clientLeft + element.clientWidth
      };
    }
    return element.getBoundingClientRect();
  };
  Routines.prototype.getSize = function (element, doNotBind) {
    return this.getParams(element, doNotBind)[this.horizontal ? 'width' : 'height'];
  };
  Routines.prototype.getSizeStyle = function (element) {
    this.checkElement(element);
    var size = element.style[this.horizontal ? 'width' : 'height'];
    return parseFloat(size) || 0;
  };
  Routines.prototype.setSizeStyle = function (element, value) {
    this.checkElement(element);
    value = Math.max(0, Math.round(value));
    element.style[this.horizontal ? 'width' : 'height'] = value + "px";
  };
  Routines.prototype.getEdge = function (element, direction, doNotBind) {
    var params = this.getParams(element, doNotBind);
    var isFwd = direction === Direction.forward;
    return params[isFwd ? (this.horizontal ? 'right' : 'bottom') : (this.horizontal ? 'left' : 'top')];
  };
  Routines.prototype.getEdge2 = function (element, direction, relativeElement, opposite) {
    // vertical only ?
    return element.offsetTop - (relativeElement ? relativeElement.scrollTop : 0) +
      (direction === (!opposite ? Direction.forward : Direction.backward) ? this.getSize(element) : 0);
  };
  Routines.prototype.hideElement = function (element) {
    this.checkElement(element);
    element.style.display = 'none';
  };
  Routines.prototype.getOffset = function (element) {
    this.checkElement(element);
    return (this.horizontal ? element.offsetLeft : element.offsetTop) || 0;
  };
  Routines.prototype.scrollTo = function (element, argument) {
    this.checkElement(element);
    element.scrollIntoView(argument);
  };
  return Routines;
}());
export { Routines };
//# sourceMappingURL=domRoutines.js.map