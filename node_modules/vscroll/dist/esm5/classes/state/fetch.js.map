{"version":3,"file":"fetch.js","sourceRoot":"","sources":["../../../../src/classes/state/fetch.ts"],"names":[],"mappings":"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","sourcesContent":["import { Item } from '../item';\nimport { Direction } from '../../inputs/index';\n\nclass Positions {\n  startDelta: number;\n  before: number;\n  relative: number;\n  start: number;\n  end: number;\n\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    this.startDelta = 0;\n    this.before = 0;\n  }\n}\n\nclass First {\n  index: number;\n  indexBuffer: number;\n  position: number;\n\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    this.index = NaN;\n    this.indexBuffer = NaN;\n    this.position = NaN;\n  }\n}\n\nclass Last {\n  index: number;\n  indexBuffer: number;\n\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    this.index = NaN;\n    this.indexBuffer = NaN;\n  }\n}\n\nexport class FetchModel {\n  private _newItemsData: unknown[] | null;\n\n  items: Item[];\n  positions: Positions;\n  first: First;\n  last: Last;\n  hasAnotherPack: boolean;\n  callCount: number;\n  minIndex: number;\n  firstVisibleIndex: number;\n  firstVisibleItemDelta: number;\n  negativeSize: number;\n  direction: Direction | null;\n  cancel: (() => void) | null;\n\n  simulate: boolean;\n  isPrepend: boolean;\n  isCheck: boolean;\n  doRemove: boolean;\n\n  constructor() {\n    this.callCount = 0;\n    this.positions = new Positions();\n    this.first = new First();\n    this.last = new Last();\n    this.reset();\n  }\n\n  reset(): void {\n    this._newItemsData = null;\n    this.items = [];\n    this.positions.reset();\n    this.first.reset();\n    this.last.reset();\n    this.hasAnotherPack = false;\n    this.firstVisibleIndex = NaN;\n    this.firstVisibleItemDelta = NaN;\n    this.negativeSize = 0;\n    this.direction = null;\n    this.cancel = null;\n    this.simulate = false;\n    this.isPrepend = false;\n    this.isCheck = false;\n    this.doRemove = false;\n  }\n\n  get newItemsData(): unknown[] | null {\n    return this._newItemsData;\n  }\n\n  set newItemsData(items: unknown[] | null) {\n    this._newItemsData = items;\n    if (items && items.length) {\n      this.callCount++;\n    }\n  }\n\n  get shouldFetch(): boolean {\n    return !!this.count;\n  }\n\n  get hasNewItems(): boolean {\n    return !!((this._newItemsData && this._newItemsData.length));\n  }\n\n  get index(): number {\n    return this.first.index;\n  }\n\n  get count(): number {\n    return !isNaN(this.first.index) && !isNaN(this.last.index) ? this.last.index - this.first.index + 1 : 0;\n  }\n\n  startSimulate(items: Item[]): void {\n    this.simulate = true;\n    this._newItemsData = items.map(item => item.data);\n    this.items = items;\n    this.hasAnotherPack = false;\n    this.negativeSize = 0;\n  }\n\n  stopSimulate(): void {\n    this.simulate = false;\n    this.isPrepend = false;\n    this.isCheck = false;\n    this.doRemove = false;\n  }\n\n  append(items: Item[]): void {\n    this.startSimulate(items);\n    this.last.index = items[items.length - 1].$index;\n    this.first.index = items[0].$index;\n    this.direction = Direction.forward;\n  }\n\n  prepend(items: Item[]): void {\n    this.startSimulate(items);\n    this.last.index = items[0].$index;\n    this.first.index = items[items.length - 1].$index;\n    this.direction = Direction.backward;\n    this.isPrepend = true;\n  }\n\n  check(items: Item[]): void {\n    this.startSimulate(items);\n    this.last.index = items[0].$index;\n    this.first.index = items[items.length - 1].$index;\n    this.isCheck = true;\n  }\n\n  remove(): void {\n    this.startSimulate([]);\n    this.doRemove = true;\n    // firstVisibleIndex & delta should be set inside process\n  }\n\n  update(index: number, delta: number, items: Item[], itemsToRemove: Item[]): void {\n    this.startSimulate(items);\n    this.firstVisibleIndex = index;\n    this.firstVisibleItemDelta = delta;\n    this.doRemove = itemsToRemove.length > 0;\n  }\n}\n"]}