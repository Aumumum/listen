import { Direction } from '../../inputs/index';
var Positions = /** @class */ (function () {
  function Positions() {
    this.reset();
  }
  Positions.prototype.reset = function () {
    this.startDelta = 0;
    this.before = 0;
  };
  return Positions;
}());
var First = /** @class */ (function () {
  function First() {
    this.reset();
  }
  First.prototype.reset = function () {
    this.index = NaN;
    this.indexBuffer = NaN;
    this.position = NaN;
  };
  return First;
}());
var Last = /** @class */ (function () {
  function Last() {
    this.reset();
  }
  Last.prototype.reset = function () {
    this.index = NaN;
    this.indexBuffer = NaN;
  };
  return Last;
}());
var FetchModel = /** @class */ (function () {
  function FetchModel() {
    this.callCount = 0;
    this.positions = new Positions();
    this.first = new First();
    this.last = new Last();
    this.reset();
  }
  FetchModel.prototype.reset = function () {
    this._newItemsData = null;
    this.items = [];
    this.positions.reset();
    this.first.reset();
    this.last.reset();
    this.hasAnotherPack = false;
    this.firstVisibleIndex = NaN;
    this.firstVisibleItemDelta = NaN;
    this.negativeSize = 0;
    this.direction = null;
    this.cancel = null;
    this.simulate = false;
    this.isPrepend = false;
    this.isCheck = false;
    this.doRemove = false;
  };
  Object.defineProperty(FetchModel.prototype, "newItemsData", {
    get: function () {
      return this._newItemsData;
    },
    set: function (items) {
      this._newItemsData = items;
      if (items && items.length) {
        this.callCount++;
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FetchModel.prototype, "shouldFetch", {
    get: function () {
      return !!this.count;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FetchModel.prototype, "hasNewItems", {
    get: function () {
      return !!((this._newItemsData && this._newItemsData.length));
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FetchModel.prototype, "index", {
    get: function () {
      return this.first.index;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FetchModel.prototype, "count", {
    get: function () {
      return !isNaN(this.first.index) && !isNaN(this.last.index) ? this.last.index - this.first.index + 1 : 0;
    },
    enumerable: false,
    configurable: true
  });
  FetchModel.prototype.startSimulate = function (items) {
    this.simulate = true;
    this._newItemsData = items.map(function (item) { return item.data; });
    this.items = items;
    this.hasAnotherPack = false;
    this.negativeSize = 0;
  };
  FetchModel.prototype.stopSimulate = function () {
    this.simulate = false;
    this.isPrepend = false;
    this.isCheck = false;
    this.doRemove = false;
  };
  FetchModel.prototype.append = function (items) {
    this.startSimulate(items);
    this.last.index = items[items.length - 1].$index;
    this.first.index = items[0].$index;
    this.direction = Direction.forward;
  };
  FetchModel.prototype.prepend = function (items) {
    this.startSimulate(items);
    this.last.index = items[0].$index;
    this.first.index = items[items.length - 1].$index;
    this.direction = Direction.backward;
    this.isPrepend = true;
  };
  FetchModel.prototype.check = function (items) {
    this.startSimulate(items);
    this.last.index = items[0].$index;
    this.first.index = items[items.length - 1].$index;
    this.isCheck = true;
  };
  FetchModel.prototype.remove = function () {
    this.startSimulate([]);
    this.doRemove = true;
    // firstVisibleIndex & delta should be set inside process
  };
  FetchModel.prototype.update = function (index, delta, items, itemsToRemove) {
    this.startSimulate(items);
    this.firstVisibleIndex = index;
    this.firstVisibleItemDelta = delta;
    this.doRemove = itemsToRemove.length > 0;
  };
  return FetchModel;
}());
export { FetchModel };
//# sourceMappingURL=fetch.js.map