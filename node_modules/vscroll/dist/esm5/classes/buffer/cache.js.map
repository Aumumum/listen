{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../../../src/classes/buffer/cache.ts"],"names":[],"mappings":"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","sourcesContent":["import { DefaultSize } from './defaultSize';\nimport { Item } from '../item';\nimport { Settings } from '../settings';\nimport { Logger } from '../logger';\nimport { SizeStrategy } from '../../inputs/index';\n\nexport class ItemCache<Data = unknown> {\n  $index: number;\n  nodeId: string;\n  data: Data | null;\n  size: number;\n  position: number;\n\n  constructor(item: Item<Data>, saveData: boolean) {\n    this.$index = item.$index;\n    this.nodeId = item.nodeId;\n    this.data = saveData ? item.data : null;\n    this.size = item.size;\n  }\n\n  changeIndex(value: number): void {\n    this.$index = value;\n    this.nodeId = String(value);\n  }\n}\n\nexport class Cache<Data = unknown> {\n  minIndex: number;\n  maxIndex: number;\n\n  readonly itemSize: number;\n  readonly saveData: boolean;\n  readonly cacheOnReload: boolean;\n  readonly sizeStrategy: SizeStrategy;\n  readonly logger: Logger;\n  private items: Map<number, ItemCache<Data>>;\n  private defaultSize: DefaultSize;\n\n  constructor({ itemSize, cacheData, cacheOnReload, sizeStrategy }: Settings, logger: Logger) {\n    this.itemSize = itemSize;\n    this.saveData = cacheData;\n    this.cacheOnReload = cacheOnReload;\n    this.sizeStrategy = sizeStrategy;\n    this.logger = logger;\n    this.items = new Map<number, ItemCache<Data>>();\n    this.defaultSize = new DefaultSize(itemSize, sizeStrategy);\n    this.reset(true);\n  }\n\n  reset(force: boolean): void {\n    force = force || !this.cacheOnReload;\n    if (force) {\n      this.minIndex = +Infinity;\n      this.maxIndex = -Infinity;\n      this.items.clear();\n    }\n    this.defaultSize.reset(force);\n  }\n\n  get size(): number {\n    return this.items.size;\n  }\n\n  get(index: number): ItemCache<Data> | undefined {\n    return this.items.get(index);\n  }\n\n  getItemSize(index: number): number {\n    const item = this.get(index);\n    return item ? item.size : 0;\n  }\n\n  getDefaultSize(): number {\n    return this.defaultSize.get();\n  }\n\n  recalculateDefaultSize(): boolean {\n    if (this.defaultSize.recalculate(this.size)) {\n      this.logger.log(() => `default size has been updated: ${this.defaultSize.get()}`);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Adds item to Set by $index, replaces existed item if $index matches.\n   * Maintains min/max indexes and default item size.\n   *\n   * @param {Item<Data>} item A Buffer item to be cached, an objects with { $index, data, size } props.\n   * \n   * @returns {ItemCache<Data>} Cached item.\n   */\n  add(item: Item<Data>): ItemCache<Data> {\n    let itemCache = this.get(item.$index);\n    if (itemCache) { // adding item is already cached\n      if (this.saveData) {\n        itemCache.data = item.data;\n      }\n      if (itemCache.size !== item.size) { // size changes\n        if (itemCache.size !== void 0) {\n          this.defaultSize.setExisted(itemCache, item);\n        } else {\n          this.defaultSize.setNew(item);\n        }\n        itemCache.size = item.size;\n      }\n    } else {\n      itemCache = new ItemCache<Data>(item, this.saveData);\n      this.items.set(item.$index, itemCache);\n      this.defaultSize.setNew(itemCache);\n    }\n    if (item.$index < this.minIndex) {\n      this.minIndex = item.$index;\n    }\n    if (item.$index > this.maxIndex) {\n      this.maxIndex = item.$index;\n    }\n    return itemCache;\n  }\n\n  /**\n   * Removes items from Set, shifts $indexes of items that remain.\n   * Replaces current Set with a new one with new regular $indexes.\n   * Maintains min/max indexes and default item size.\n   *\n   * @param {number[]} toRemove List of indexes to be removed.\n   * @param {boolean} fixRight Defines indexes shifting strategy.\n   * If false, indexes that are greater than the removed ones will be decreased.\n   * If true, indexes that are less than than the removed ones will be increased.\n   */\n  removeItems(toRemove: number[], fixRight: boolean): void {\n    const items = new Map<number, ItemCache<Data>>();\n    let min = Infinity, max = -Infinity;\n    this.items.forEach(item => {\n      if (toRemove.some(index => index === item.$index)) {\n        if (item.size !== void 0) {\n          this.defaultSize.setRemoved(item);\n        }\n        return;\n      }\n      const diff = fixRight\n        ? toRemove.reduce((acc, index) => acc + (item.$index < index ? 1 : 0), 0)\n        : toRemove.reduce((acc, index) => acc - (item.$index > index ? 1 : 0), 0);\n      item.changeIndex(item.$index + diff);\n      items.set(item.$index, item);\n      min = item.$index < min ? item.$index : min;\n      max = item.$index > max ? item.$index : max;\n    });\n    this.items = items;\n    this.minIndex = min;\n    this.maxIndex = max;\n  }\n\n  /**\n   * Destructively updates Set based on subset (before-after) changes.\n   * Replaces current Set with a new one with new regular $indexes.\n   * Maintains min/max indexes. Maintains default item size on remove only.\n   * Inserted and replaced items will be taken into account on Cache.add async calls after render.\n   *\n   * @param {number[]} before Initial subset of indexes to be replaced by \"after\". Must be incremental.\n   * @param {Item<Data>[]} after Transformed subset that replaces \"before\". Must be be $index-incremental.\n   * Must contain at least 1 $index from \"before\" or be empty.\n   * @param {boolean} fixRight This is to fix right indexes during subset collapsing. Acts only if \"after\" is empty.\n   */\n  updateSubset(before: number[], after: Item<Data>[], fixRight?: boolean): void {\n    if (!this.size || !before.length) {\n      return;\n    }\n    const minB = before[0], maxB = before[before.length - 1];\n    let leftDiff: number, rightDiff: number, found;\n    if (after.length) {\n      const minA = after[0].$index, maxA = after[after.length - 1].$index;\n      leftDiff = minA - minB;\n      rightDiff = maxA - maxB;\n    } else {\n      leftDiff = fixRight ? maxB - minB + 1 : 0;\n      rightDiff = fixRight ? 0 : minB - maxB - 1;\n    }\n    const items = new Map<number, ItemCache<Data>>();\n    this.items.forEach(item => {\n      if (item.$index < minB) { // items to the left of the subset\n        item.changeIndex(item.$index + leftDiff);\n        items.set(item.$index, item);\n        return;\n      } else if (item.$index > maxB) { // items to the right of the subset\n        item.changeIndex(item.$index + rightDiff);\n        items.set(item.$index, item);\n        return;\n      }\n    });\n    after.forEach(item => // subset items\n      items.set(item.$index, new ItemCache<Data>(item, this.saveData))\n    );\n    before.forEach(index => { // removed items immediately affect the default size\n      if (!after.some(({ $index }) => index === $index) && (found = this.get(index))) {\n        this.defaultSize.setRemoved(found);\n      }\n    });\n    this.minIndex += leftDiff;\n    this.maxIndex += rightDiff;\n    this.items = items;\n  }\n}\n"]}