{"version":3,"file":"workflow-transducer.js","sourceRoot":"","sources":["../../src/workflow-transducer.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CommonProcess,\n  AdapterProcess,\n  ProcessStatus as Status,\n  Init,\n  Scroll,\n  Reset,\n  Reload,\n  Append,\n  Check,\n  Remove,\n  UserClip,\n  Insert,\n  Replace,\n  Update,\n  Fix,\n  Start,\n  PreFetch,\n  Fetch,\n  PostFetch,\n  Render,\n  PreClip,\n  Clip,\n  Adjust,\n  End,\n} from './processes/index';\n\nimport { StateMachineParams } from './interfaces/index';\n\nexport const runStateMachine = ({\n  input: { process, status, payload = {} },\n  methods: { run, interrupt, done, onError }\n}: StateMachineParams): void => {\n  if (status === Status.error) {\n    onError(process, payload);\n    if (!process.startsWith('adapter')) {\n      run(End)(payload);\n    }\n    return;\n  }\n  const { options } = payload;\n  switch (process) {\n    case CommonProcess.init:\n      if (status === Status.start) { // App start\n        run(Init)(process);\n      }\n      if (status === Status.next) {\n        run(Start)();\n      }\n      break;\n    case CommonProcess.scroll:\n      if (status === Status.start) {\n        run(Scroll)(payload);\n      }\n      if (status === Status.next) {\n        run(Init)(process);\n      }\n      break;\n    case AdapterProcess.reset:\n    case AdapterProcess.reload:\n      if (status === Status.start) {\n        if (process === AdapterProcess.reset) {\n          run(Reset)(options);\n        } else {\n          run(Reload)(options);\n        }\n      }\n      if (status === Status.next) {\n        interrupt({ process, ...payload });\n        if (payload.finalize) {\n          run(End)();\n        } else {\n          run(Init)(process);\n        }\n      }\n      break;\n    case AdapterProcess.append:\n    case AdapterProcess.prepend:\n      if (status === Status.start) {\n        run(Append)({ process, options });\n      }\n      if (status === Status.next) {\n        run(Init)(process);\n      }\n      break;\n    case AdapterProcess.check:\n      if (status === Status.start) {\n        run(Check)();\n      }\n      if (status === Status.next) {\n        run(Init)(process);\n      }\n      break;\n    case AdapterProcess.remove:\n      if (status === Status.start) {\n        run(Remove)(options);\n      }\n      if (status === Status.next) {\n        run(Init)(process);\n      }\n      break;\n    case AdapterProcess.clip:\n      if (status === Status.start) {\n        run(UserClip)(options);\n      }\n      if (status === Status.next) {\n        run(Init)(process);\n      }\n      break;\n    case AdapterProcess.insert:\n      if (status === Status.start) {\n        run(Insert)(options);\n      }\n      if (status === Status.next) {\n        run(Init)(process);\n      }\n      break;\n    case AdapterProcess.replace:\n      if (status === Status.start) {\n        run(Replace)(options);\n      }\n      if (status === Status.next) {\n        run(Init)(process);\n      }\n      break;\n    case AdapterProcess.update:\n      if (status === Status.start) {\n        run(Update)(options);\n      }\n      if (status === Status.next) {\n        run(Init)(process);\n      }\n      break;\n    case AdapterProcess.fix:\n      if (status === Status.start) {\n        run(Fix)(options);\n      }\n      if (status === Status.next) {\n        run(Init)(process);\n      }\n      break;\n    case CommonProcess.start:\n      switch (payload.process) {\n        case AdapterProcess.append:\n        case AdapterProcess.check:\n        case AdapterProcess.insert:\n          run(Render)();\n          break;\n        case AdapterProcess.remove:\n          run(Adjust)();\n          break;\n        case AdapterProcess.replace:\n        case AdapterProcess.update:\n          if (payload.doRender) {\n            run(Render)();\n          } else {\n            run(Adjust)();\n          }\n          break;\n        default:\n          run(PreFetch)();\n      }\n      break;\n    case CommonProcess.preFetch:\n      if (status === Status.next) {\n        switch (payload.process) {\n          case AdapterProcess.clip:\n            run(PreClip)();\n            break;\n          default:\n            run(Fetch)();\n        }\n      }\n      if (status === Status.done) {\n        run(End)();\n      }\n      break;\n    case CommonProcess.fetch:\n      run(PostFetch)();\n      break;\n    case CommonProcess.postFetch:\n      if (status === Status.next) {\n        run(Render)();\n      }\n      if (status === Status.done) {\n        run(End)();\n      }\n      break;\n    case CommonProcess.render:\n      if (status === Status.next) {\n        switch (payload.process) {\n          case AdapterProcess.append:\n          case AdapterProcess.check:\n          case AdapterProcess.insert:\n          case AdapterProcess.replace:\n          case AdapterProcess.update:\n            run(Adjust)();\n            break;\n          default:\n            run(PreClip)();\n        }\n      }\n      if (status === Status.done) {\n        run(End)();\n      }\n      break;\n    case CommonProcess.preClip:\n      if (payload.doClip) {\n        run(Clip)();\n      } else {\n        run(Adjust)();\n      }\n      break;\n    case CommonProcess.clip:\n      run(Adjust)();\n      break;\n    case CommonProcess.adjust:\n      run(End)();\n      break;\n    case CommonProcess.end:\n      if (status === Status.next) {\n        switch (payload.process) {\n          case AdapterProcess.reset:\n          case AdapterProcess.reload:\n            done();\n            run(Init)(payload.process);\n            break;\n          default:\n            run(Start)();\n        }\n      }\n      if (status === Status.done) {\n        done();\n      }\n      break;\n  }\n};\n"]}