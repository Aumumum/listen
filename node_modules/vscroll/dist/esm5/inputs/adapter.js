var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
import { VALIDATORS } from './validation';
import { DatasourceProps as AdapterResetParams } from './datasource';
import { AdapterProcess as Process } from '../processes/misc/enums';
var INTEGER = VALIDATORS.INTEGER, INTEGER_UNLIMITED = VALIDATORS.INTEGER_UNLIMITED, BOOLEAN = VALIDATORS.BOOLEAN, OBJECT = VALIDATORS.OBJECT, ITEM_LIST = VALIDATORS.ITEM_LIST, FUNC_WITH_X_ARGUMENTS = VALIDATORS.FUNC_WITH_X_ARGUMENTS, FUNC_WITH_X_AND_MORE_ARGUMENTS = VALIDATORS.FUNC_WITH_X_AND_MORE_ARGUMENTS, FUNC_WITH_X_TO_Y_ARGUMENTS = VALIDATORS.FUNC_WITH_X_TO_Y_ARGUMENTS, ONE_OF_MUST = VALIDATORS.ONE_OF_MUST, ONE_OF_CAN = VALIDATORS.ONE_OF_CAN, OR = VALIDATORS.OR;
var AdapterNoParams;
(function (AdapterNoParams) {
})(AdapterNoParams || (AdapterNoParams = {}));
var NO_METHOD_PARAMS = {};
var RESET_METHOD_PARAMS = (_a = {},
  _a[AdapterResetParams.get] = {
    validators: [FUNC_WITH_X_AND_MORE_ARGUMENTS(2)]
  },
  _a[AdapterResetParams.settings] = {
    validators: [OBJECT]
  },
  _a[AdapterResetParams.devSettings] = {
    validators: [OBJECT]
  },
  _a);
var AdapterReloadParams;
(function (AdapterReloadParams) {
  AdapterReloadParams["reloadIndex"] = "reloadIndex";
})(AdapterReloadParams || (AdapterReloadParams = {}));
var RELOAD_METHOD_PARAMS = (_b = {},
  _b[AdapterReloadParams.reloadIndex] = {
    validators: [INTEGER]
  },
  _b);
var AdapterAppendParams;
(function (AdapterAppendParams) {
  AdapterAppendParams["items"] = "items";
  AdapterAppendParams["bof"] = "bof";
  AdapterAppendParams["eof"] = "eof";
})(AdapterAppendParams || (AdapterAppendParams = {}));
var APPEND_METHOD_PARAMS = (_c = {},
  _c[AdapterAppendParams.items] = {
    validators: [ITEM_LIST],
    mandatory: true
  },
  _c[AdapterAppendParams.bof] = {
    validators: [BOOLEAN, ONE_OF_CAN([AdapterAppendParams.eof])]
  },
  _c[AdapterAppendParams.eof] = {
    validators: [BOOLEAN, ONE_OF_CAN([AdapterAppendParams.bof])]
  },
  _c);
var AdapterRemoveParams;
(function (AdapterRemoveParams) {
  AdapterRemoveParams["predicate"] = "predicate";
  AdapterRemoveParams["indexes"] = "indexes";
  AdapterRemoveParams["increase"] = "increase";
})(AdapterRemoveParams || (AdapterRemoveParams = {}));
var REMOVE_METHOD_PARAMS = (_d = {},
  _d[AdapterRemoveParams.predicate] = {
    validators: [FUNC_WITH_X_ARGUMENTS(1), ONE_OF_MUST([AdapterRemoveParams.indexes])]
  },
  _d[AdapterRemoveParams.indexes] = {
    validators: [ITEM_LIST, ONE_OF_MUST([AdapterRemoveParams.predicate])]
  },
  _d[AdapterRemoveParams.increase] = {
    validators: [BOOLEAN],
    defaultValue: false
  },
  _d);
var AdapterClipParams;
(function (AdapterClipParams) {
  AdapterClipParams["backwardOnly"] = "backwardOnly";
  AdapterClipParams["forwardOnly"] = "forwardOnly";
})(AdapterClipParams || (AdapterClipParams = {}));
var CLIP_METHOD_PARAMS = (_e = {},
  _e[AdapterClipParams.backwardOnly] = {
    validators: [BOOLEAN, ONE_OF_CAN([AdapterClipParams.forwardOnly])],
    defaultValue: false
  },
  _e[AdapterClipParams.forwardOnly] = {
    validators: [BOOLEAN, ONE_OF_CAN([AdapterClipParams.backwardOnly])],
    defaultValue: false
  },
  _e);
var AdapterInsertParams;
(function (AdapterInsertParams) {
  AdapterInsertParams["items"] = "items";
  AdapterInsertParams["before"] = "before";
  AdapterInsertParams["after"] = "after";
  AdapterInsertParams["decrease"] = "decrease";
})(AdapterInsertParams || (AdapterInsertParams = {}));
var INSERT_METHOD_PARAMS = (_f = {},
  _f[AdapterInsertParams.items] = {
    validators: [ITEM_LIST],
    mandatory: true
  },
  _f[AdapterInsertParams.before] = {
    validators: [FUNC_WITH_X_ARGUMENTS(1), ONE_OF_MUST([AdapterInsertParams.after])]
  },
  _f[AdapterInsertParams.after] = {
    validators: [FUNC_WITH_X_ARGUMENTS(1), ONE_OF_MUST([AdapterInsertParams.before])]
  },
  _f[AdapterInsertParams.decrease] = {
    validators: [BOOLEAN],
    defaultValue: false
  },
  _f);
var AdapterReplaceParams;
(function (AdapterReplaceParams) {
  AdapterReplaceParams["items"] = "items";
  AdapterReplaceParams["predicate"] = "predicate";
  AdapterReplaceParams["fixRight"] = "fixRight";
})(AdapterReplaceParams || (AdapterReplaceParams = {}));
var REPLACE_METHOD_PARAMS = (_g = {},
  _g[AdapterInsertParams.items] = {
    validators: [ITEM_LIST],
    mandatory: true
  },
  _g[AdapterReplaceParams.predicate] = {
    validators: [FUNC_WITH_X_ARGUMENTS(1)],
    mandatory: true
  },
  _g[AdapterReplaceParams.fixRight] = {
    validators: [BOOLEAN],
    defaultValue: false
  },
  _g);
var AdapterUpdateParams;
(function (AdapterUpdateParams) {
  AdapterUpdateParams["predicate"] = "predicate";
  AdapterUpdateParams["fixRight"] = "fixRight";
})(AdapterUpdateParams || (AdapterUpdateParams = {}));
var UPDATE_METHOD_PARAMS = (_h = {},
  _h[AdapterUpdateParams.predicate] = {
    validators: [FUNC_WITH_X_ARGUMENTS(1)],
    mandatory: true
  },
  _h[AdapterUpdateParams.fixRight] = {
    validators: [BOOLEAN],
    defaultValue: false
  },
  _h);
var AdapterFixParams;
(function (AdapterFixParams) {
  AdapterFixParams["scrollPosition"] = "scrollPosition";
  AdapterFixParams["minIndex"] = "minIndex";
  AdapterFixParams["maxIndex"] = "maxIndex";
  AdapterFixParams["updater"] = "updater";
  AdapterFixParams["scrollToItem"] = "scrollToItem";
  AdapterFixParams["scrollToItemOpt"] = "scrollToItemOpt";
})(AdapterFixParams || (AdapterFixParams = {}));
var FIX_METHOD_PARAMS = (_j = {},
  _j[AdapterFixParams.scrollPosition] = {
    validators: [INTEGER_UNLIMITED]
  },
  _j[AdapterFixParams.minIndex] = {
    validators: [INTEGER_UNLIMITED]
  },
  _j[AdapterFixParams.maxIndex] = {
    validators: [INTEGER_UNLIMITED]
  },
  _j[AdapterFixParams.updater] = {
    validators: [FUNC_WITH_X_TO_Y_ARGUMENTS(1, 2)]
  },
  _j[AdapterFixParams.scrollToItem] = {
    validators: [FUNC_WITH_X_ARGUMENTS(1)]
  },
  _j[AdapterFixParams.scrollToItemOpt] = {
    validators: [OR([BOOLEAN, OBJECT])]
  },
  _j);
export var AdapterMethods = (_k = {},
  _k[Process.reset] = AdapterResetParams,
  _k[Process.reload] = AdapterReloadParams,
  _k[Process.append] = AdapterAppendParams,
  _k[Process.prepend] = AdapterAppendParams,
  _k[Process.check] = AdapterNoParams,
  _k[Process.remove] = AdapterRemoveParams,
  _k[Process.clip] = AdapterClipParams,
  _k[Process.insert] = AdapterInsertParams,
  _k[Process.replace] = AdapterReplaceParams,
  _k[Process.update] = AdapterUpdateParams,
  _k[Process.fix] = AdapterFixParams,
  _k);
export var ADAPTER_METHODS = (_l = {},
  _l[Process.reset] = RESET_METHOD_PARAMS,
  _l[Process.reload] = RELOAD_METHOD_PARAMS,
  _l[Process.append] = APPEND_METHOD_PARAMS,
  _l[Process.prepend] = APPEND_METHOD_PARAMS,
  _l[Process.check] = NO_METHOD_PARAMS,
  _l[Process.remove] = REMOVE_METHOD_PARAMS,
  _l[Process.clip] = CLIP_METHOD_PARAMS,
  _l[Process.insert] = INSERT_METHOD_PARAMS,
  _l[Process.replace] = REPLACE_METHOD_PARAMS,
  _l[Process.update] = UPDATE_METHOD_PARAMS,
  _l[Process.fix] = FIX_METHOD_PARAMS,
  _l);
//# sourceMappingURL=adapter.js.map