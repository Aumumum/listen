{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../../src/interfaces/validation.ts"],"names":[],"mappings":"","sourcesContent":["import { ValidatorType } from '../inputs/validation';\n\nexport interface IValidationContext { [key: string]: unknown; }\n\ntype ValidatorMethod = (value: unknown, context?: IValidationContext) => ValidatedValue;\n\nexport interface ValidatedValue {\n  value: unknown;\n  isSet: boolean;\n  isValid: boolean;\n  errors: string[];\n}\n\nexport interface IValidator {\n  type: ValidatorType;\n  method: ValidatorMethod;\n}\n\nexport interface ICommonProp {\n  validators: IValidator[];\n  mandatory?: boolean; // if true, undefined prop will produce error\n  defaultValue?: unknown; // if present, undefined non-mandatory prop will be set to defaultValue\n}\n\nexport type ICommonProps<T extends PropertyKey> = {\n  [key in T]: ICommonProp;\n};\n\nexport type IValidatedCommonProps<T extends PropertyKey> = {\n  [key in T]: ValidatedValue;\n};\n\nexport interface IValidatedData {\n  isValid: boolean;\n  errors: string[];\n  params: IValidatedCommonProps<PropertyKey>;\n  showErrors: () => void;\n}\n"]}