import { DatasourceGeneric, makeDatasource } from './classes/datasource';
import { Settings } from './classes/settings';
import { Logger } from './classes/logger';
import { Routines } from './classes/domRoutines';
import { Viewport } from './classes/viewport';
import { Buffer } from './classes/buffer';
import { State } from './classes/state';
import { Adapter } from './classes/adapter';
import { validate, DATASOURCE } from './inputs/index';
import core from './version';
export var INVALID_DATASOURCE_PREFIX = 'Invalid datasource:';
var instanceCount = 0;
var Scroller = /** @class */ (function () {
  function Scroller(_a) {
    var datasource = _a.datasource, consumer = _a.consumer, element = _a.element, workflow = _a.workflow, scroller = _a.scroller;
    var get = validate(datasource, DATASOURCE).params.get;
    if (!get.isValid) {
      throw new Error(INVALID_DATASOURCE_PREFIX + " " + get.errors[0]);
    }
    var packageInfo = scroller ? scroller.state.packageInfo : { consumer: consumer, core: core };
    element = scroller ? scroller.viewport.element : element;
    workflow = scroller ? scroller.workflow : workflow;
    this.workflow = workflow;
    this.settings = new Settings(datasource.settings, datasource.devSettings, ++instanceCount);
    this.logger = new Logger(this, packageInfo, datasource.adapter);
    this.routines = new Routines(this.settings);
    this.state = new State(packageInfo, this.settings, scroller ? scroller.state : void 0);
    this.buffer = new Buffer(this.settings, workflow.onDataChanged, this.logger);
    this.viewport = new Viewport(element, this.settings, this.routines, this.state, this.logger);
    this.logger.object('vscroll settings object', this.settings, true);
    this.initDatasource(datasource, scroller);
  }
  Scroller.prototype.initDatasource = function (datasource, scroller) {
    var _this = this;
    if (scroller) { // scroller re-instantiating case
      this.datasource = datasource;
      this.adapter = scroller.adapter;
      // todo: what about (this.settings.adapter !== scroller.setting.adapter) case?
      return;
    }
    // scroller is being instantiated for the first time
    var constructed = datasource instanceof DatasourceGeneric;
    var mockAdapter = !constructed && !this.settings.adapter;
    if (constructed) { // datasource is already instantiated
      this.datasource = datasource;
    }
    else { // datasource as POJO
      var DS = makeDatasource(function () { return ({ mock: mockAdapter }); });
      this.datasource = new DS(datasource);
      if (this.settings.adapter) {
        datasource.adapter = this.datasource.adapter;
      }
    }
    var publicContext = !mockAdapter ? this.datasource.adapter : null;
    this.adapter = new Adapter(publicContext, function () { return _this.workflow; }, this.logger);
  };
  Scroller.prototype.init = function (adapterRun$) {
    this.viewport.reset(this.buffer.startIndex);
    this.logger.stat('initialization');
    this.adapter.initialize(this.buffer, this.state, this.logger, adapterRun$);
  };
  Scroller.prototype.dispose = function (forever) {
    if (forever) { // Adapter is not re-instantiated on reset
      this.adapter.dispose();
    }
    this.buffer.dispose();
    this.state.dispose();
  };
  Scroller.prototype.finalize = function () {
  };
  return Scroller;
}());
export { Scroller };
//# sourceMappingURL=scroller.js.map